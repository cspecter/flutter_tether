# --- Database Connection Details ---
# Specifies how to connect to your Supabase (<PostgreSQL>) database to read its schema.
database:
  host: TETHER_SUPABASE_HOST # The hostname or IP address of your Supabase database.
  port: TETHER_PORT_NAME # The port number for your Supabase database. Default Supabase is 5432, but local dev might use 54321 via Docker.
  database: TETHER_DB_NAME # The name of the database to connect to (usually 'postgres' for Supabase).
  username: TETHER_DB_USERNAME # The username for connecting to the database (usually 'postgres' for Supabase).
  password: TETHER_DB_PASSWORD # The password for the specified username. For local development, this might be a default. For production, use environment variables or a secure secrets manager.
  ssl: TETHER_SSL # Whether to use SSL for the database connection. Supabase cloud instances require SSL. Set to true for cloud, false for local unsecured instances.

# --- General Code Generation Settings ---
generation:
  # The primary output directory where most generated Dart files will be placed.
  # Paths for specific generated files (models, builders, etc.) are relative to this directory.
  output_directory: lib/database

  # A list of table names from your Supabase schema that should be completely ignored by all generators.
  # Useful for excluding internal Supabase tables, migration history tables, or any other tables
  # for which you do not want Dart code generated.
  exclude_tables:
    - migrations # Example: 'schema_migrations' or 'supabase_migrations.schema_migrations'
    - schema_migrations # Example: 'pgmigrations'

  # If 'generate_for_all_tables' is false, only tables listed here will have code generated for them.
  # If 'generate_for_all_tables' is true, this list can be used to explicitly include tables that might
  # otherwise be excluded by complex rules (though 'exclude_tables' always takes precedence).
  include_tables: []

  # A list of foreign key constraint names that should be ignored when generating relationships
  # between models or in select builders. This can be useful if certain relationships are managed
  # manually or should not be exposed in the generated code.
  exclude_references: []

  # If true, the generator will attempt to create code for all tables found in the connected database's
  # 'public' schema (unless they are listed in 'exclude_tables').
  # If false, only tables explicitly listed in 'include_tables' will be processed.
  generate_for_all_tables: true

  # --- Database Class Settings (for generated SQLite helpers or database access classes) ---
  # The desired class name for your main generated database access class (e.g., if generating an Sqflite/Drift helper).
  dbClassName: AppDb
  # The filename for the local SQLite database if you are generating code that uses one.
  databaseName: 'app_db.sqlite'
  # The Dart import path for your primary database access class.
  # This is used by other generated files (like providers or managers) that need to
  # reference your main database instance (e.g., where `SqliteDatabase` is initialized).
  database_import_path: 'package:example/database/database.dart' # Adjust 'example' to your actual package name.

  # --- Model Generation Settings ---
  # Configuration for generating Dart data models from your Supabase tables.
  models:
    enabled: true # If true, Dart model classes will be generated for your tables.
    # The filename for the generated file containing all model classes.
    # This file will be placed within the 'output_directory' (or 'output_directory' + 'models.output_subdir' if specified).
    filename: models.g.dart
    # Optional: A subdirectory within 'output_directory' specifically for model files.
    # E.g., if output_directory is 'lib/database' and models.output_subdir is 'models',
    # then models will be generated in 'lib/database/models/'.
    # output_subdir: 'models'
    # A prefix to add to all generated model class names. E.g., prefix 'Db' + table 'users' -> 'DbUsersModel'.
    prefix: ''
    # A suffix to add to all generated model class names. E.g., table 'users' + suffix 'Model' -> 'UsersModel'.
    suffix: Model
    # If true, generated models will use Dart's null safety features (e.g., nullable types `String?`).
    use_null_safety: true

  # --- Supabase Select List Generation Settings ---
  # This section appears to be for a generator that creates simple lists of column names for selects,
  # which might be different from the more complex "Select Builders".
  # If this is not used by your current `SupabaseGenConfig` for builders, it might be for a legacy or separate generator.
  supabase_selectors:
    enabled: true # If true, enables the generation of these selector lists.
    # filename: supabase_selectors.dart # Example filename if this generator produces a distinct file.

  # --- Supabase Select BUILDER Generation Settings ---
  # Configuration for generating fluent "Select Builder" classes, which help construct
  # complex Supabase query strings programmatically, including joins and nested selections.
  supabase_select_builders:
    enabled: true # If true, Supabase Select Builder classes will be generated.
    # Optional: The full path (relative to the project root) for the main generated file containing all select builder classes.
    # If provided, this overrides the path constructed from 'output_directory' and 'filename'.
    # output_path: 'lib/database/supabase_select_builders.g.dart'
    # The filename for the main generated select builders file.
    # This file will be placed within 'output_directory' unless 'output_path' is specified.
    filename: 'supabase_select_builders.g.dart'
    # The full path (relative to the project root) for the generated Dart file that will contain
    # the `globalSupabaseSchema` map. This map holds schema information used by the select builders at runtime.
    generated_schema_dart_file_path: 'lib/database/supabase_schema.g.dart'
    # A suffix to add to all generated Select Builder class names. E.g., table 'users' + suffix 'SelectBuilder' -> 'UsersSelectBuilder'.
    suffix: SelectBuilder

  # The Dart import path used by other generated files (like providers or client managers)
  # to import the main Supabase Select Builders file generated above.
  # This should be a valid package import path.
  supabase_select_builders_import_path: 'package:example/database/supabase_select_builders.g.dart' # Adjust 'example' to your package name.

  # The full path (relative to the project root) for a generated "schema registry" file.
  # A schema registry might provide a centralized way to access table and column metadata,
  # potentially for more dynamic query building or ORM-like features.
  schema_registry_file_path: 'lib/database/schema_registry.g.dart'


  # --- SQLite Migration Generation Settings ---
  # Configuration for generating SQL migration files, typically for use with a local SQLite database
  # that mirrors or complements your Supabase schema (e.g., for caching or offline support).
  sqlite_migrations:
    enabled: true # If true, .sql migration files will be generated based on schema differences or definitions.
    # The output subdirectory for the generated .sql migration files.
    # This path is typically relative to the project root and often placed in a directory
    # like 'assets/sqlite_migrations' (to be bundled with the app) or 'lib/database/migrations'.
    output_subdir: 'sqlite_migrations'

  # --- ClientManager Generation Settings ---
  # ClientManagers are classes that wrap the Supabase API and provide a more structured way to interact
  # with your database. They manage data fetching, caching, and state management,
  client_managers:
    enabled: true # If true, ClientManager classes will be generated for your models.
    # Optional: A subdirectory within 'output_directory' specifically for ClientManager files.
    # output_subdir: 'managers'
    # If true, generated ClientManagers (and related providers) will use Riverpod for state management.
    # If false, they might use an alternative like the Provider package, or have minimal state management hooks.
    use_riverpod: true

  # --- Provider Generation Settings ---
  # Configuration for generating state management providers (e.g., Riverpod Notifiers or Provider ChangeNotifiers)
  # that often wrap ClientManagers or provide UI-focused data streams and actions.
  providers:
    enabled: true # If true, provider classes will be generated.
    # The output subdirectory within 'output_directory' for generated provider files.
    # E.g., if output_directory is 'lib/database', providers will be in 'lib/database/providers/'.
    output_subdir: 'providers'

  # --- Authentication Settings ---
  # If your application uses Supabase authentication, you might want to include settings for generating
  # authentication-related classes and methods. This can include user profile management, session handling,
  authentication:
    # If true, the generator will create authentication-related classes and methods.
    enabled: true
    profile_table: 'profiles' # The name of the table that stores user profiles, like users or profiles.

  # --- Background Services Settings ---
  background_services:
  # If true, the generator will create background service-related classes and methods.
    enabled: true

  # A list of common string endings to remove from database column names when converting them
  # to Dart field names or relationship names. This helps in generating cleaner, more idiomatic Dart names.
  # For example, 'user_id' might become 'user'.
  sanitization_endings:
    - _id
    - _fk
    - _uuid
