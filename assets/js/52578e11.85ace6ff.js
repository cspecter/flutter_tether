"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[137],{1970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"additional_features/feed_provider","title":"Feed Management System","description":"Tether includes an optional, powerful Feed Management System designed to","source":"@site/docs/additional_features/feed_provider.md","sourceDirName":"additional_features","slug":"/additional_features/feed_provider","permalink":"/flutter_tether/additional_features/feed_provider","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Additional Features","permalink":"/flutter_tether/category/additional-features"},"next":{"title":"Auth Manager","permalink":"/flutter_tether/additional_features/auth_manager"}}');var i=t(4848),s=t(8453);const o={sidebar_position:1},d="Feed Management System",a={},l=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Setting up a Regular Feed",id:"setting-up-a-regular-feed",level:2},{value:"1. Define <code>FeedStreamNotifierSettings</code>",id:"1-define-feedstreamnotifiersettings",level:3},{value:"2. Use in a Widget",id:"2-use-in-a-widget",level:3},{value:"Setting up a Search Feed",id:"setting-up-a-search-feed",level:2},{value:"1. Define <code>FeedStreamNotifierSettings</code>",id:"1-define-feedstreamnotifiersettings-1",level:3},{value:"2. Use in a Widget",id:"2-use-in-a-widget-1",level:3},{value:"Key Features &amp; Usage Notes",id:"key-features--usage-notes",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"feed-management-system",children:"Feed Management System"})}),"\n",(0,i.jsxs)(n.p,{children:["Tether includes an optional, powerful Feed Management System designed to\nsimplify the creation and management of paginated content feeds within your\nFlutter application. This system leverages a Tether-managed local SQLite table\n(",(0,i.jsx)(n.code,{children:"feed_item_references"}),") to store the order and references of feed items,\ncombined with a Riverpod ",(0,i.jsx)(n.code,{children:"StreamNotifier"})," for reactive UI updates."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: This feature requires ",(0,i.jsx)(n.code,{children:"Riverpod"})," to work."]}),"\n",(0,i.jsx)(n.p,{children:"It supports both regular, filterable feeds and feeds driven by full-text search."}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:"At the heart of the feed system are two main classes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings<TModel>"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A configuration object that defines the behavior and data source for a\nspecific feed."}),"\n",(0,i.jsxs)(n.li,{children:["It's crucial that instances of these settings are stable (e.g., defined as\n",(0,i.jsx)(n.code,{children:"Provider"})," or ",(0,i.jsx)(n.code,{children:"final"})," constants) if their parameters don't change, or\nrecreated when parameters ",(0,i.jsx)(n.em,{children:"do"})," change, to ensure Riverpod correctly manages\nnotifier instances. For example, if you have a feed that is filtered by\ngenre, you should create a new instance of ",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"}),"\nwhenever the selected genre changes. This needs to propagate through to the\n",(0,i.jsx)(n.code,{children:"FeedStreamNotifier"})," instances that use these updated settings."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key Properties"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"feedKey"}),": A unique ",(0,i.jsx)(n.code,{children:"String"})," identifier for the feed. This key is used to\nstore and retrieve feed item references from the local database. Usually\nthis will be per Widget, for example ",(0,i.jsx)(n.code,{children:"books_feed_filtered"})," or\n",(0,i.jsx)(n.code,{children:"books_search_feed"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"clientManager"}),": The ",(0,i.jsx)(n.code,{children:"ClientManager<TModel>"})," instance for the data type\nof the feed items."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"selectArgs"}),": A ",(0,i.jsx)(n.code,{children:"SupabaseSelectBuilderBase"})," instance defining which\ncolumns and relationships to fetch for each item. This should generally\nbe a stable instance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fromJsonFactory"}),": The factory method (e.g., ",(0,i.jsx)(n.code,{children:"YourModel.fromJson"}),") to\nconvert JSON data into your ",(0,i.jsx)(n.code,{children:"TModel"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pageSize"}),": The number of items to fetch per page (defaults to 20)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"queryCustomizer"}),": An optional function\n",(0,i.jsx)(n.code,{children:"ClientManagerFilterBuilder<TModel> Function(ClientManagerFilterBuilder<TModel> baseQuery)"}),"\nthat allows you to apply filters or modifications to the base query for\nthe feed. This is useful for creating feeds filtered by a category,\nstatus, etc. To reset the filters you can pass null to this function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"searchColumn"}),": An optional ",(0,i.jsx)(n.code,{children:"TetherColumn"})," used specifically for search\nfeeds, indicating which column (typically a ",(0,i.jsx)(n.code,{children:"tsvector"})," column) to perform\nfull-text search against."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FeedStreamNotifier<TModel>"})}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"FamilyStreamNotifier"})," (from Riverpod) that manages the state of a feed\nbased on the provided ",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["It handles:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetching initial data."}),"\n",(0,i.jsx)(n.li,{children:"Fetching subsequent pages (pagination)."}),"\n",(0,i.jsx)(n.li,{children:"Applying search terms (if configured)."}),"\n",(0,i.jsx)(n.li,{children:"Applying dynamic filters."}),"\n",(0,i.jsxs)(n.li,{children:["Storing item references and their order in the local\n",(0,i.jsx)(n.code,{children:"feed_item_references"})," table."]}),"\n",(0,i.jsxs)(n.li,{children:["Streaming the ordered list of ",(0,i.jsx)(n.code,{children:"TModel"})," items to the UI."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The system works by first fetching item IDs (and potentially other minimal data)\nfrom your Supabase backend based on the configuration. These references are\nstored locally. The ",(0,i.jsx)(n.code,{children:"FeedStreamNotifier"})," then watches this local table and\nfetches the full model data (using the ",(0,i.jsx)(n.code,{children:"selectArgs"}),") for the referenced items,\nproviding a reactive stream of ",(0,i.jsx)(n.code,{children:"List<TModel>"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-a-regular-feed",children:"Setting up a Regular Feed"}),"\n",(0,i.jsx)(n.p,{children:'A "regular" feed is typically a list of items that can be paginated and\npotentially filtered based on criteria other than full-text search (e.g., by\ncategory, date, etc.).'}),"\n",(0,i.jsxs)(n.h3,{id:"1-define-feedstreamnotifiersettings",children:["1. Define ",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"})]}),"\n",(0,i.jsx)(n.p,{children:"Create a provider or a stable instance for your feed settings."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Provider to manage the selected genre ID.\nfinal selectedGenreIdProvider = NotifierProvider<StringNotifier, String?>(\n  StringNotifier.new,\n); // Starts as null, can be set to a genre ID.\n\n// Provider for the FeedStreamNotifierSettings\nfinal bookFeedProvider = Provider<FeedStreamNotifierSettings<BookModel>>((ref) {\n  final bookClientManager = ref.watch(booksManagerProvider);\n  final selectedGenreId = ref.watch(selectedGenreIdProvider);\n\n  // queryCustomizer will be re-evaluated if selectedGenreId changes\n  ClientManagerFilterBuilder<BookModel> queryCustomizer(\n    ClientManagerFilterBuilder<BookModel> baseQuery,\n  ) {\n    if (selectedGenreId == null) {\n      return baseQuery; // No genre filter\n    }\n    // IMPORTANT: When filtering on a many-to-many relationship like genres via a join table (book_genres),\n    // ensure your selectArgs in `bookSelect` includes the necessary join\n    // (e.g., BooksSelectBuilder().select().withBookGenres(BookGenresSelectBuilder().select()))\n    // and then filter on the column from the join table or the target table.\n    return baseQuery.eq(BookGenresColumn.genreId, selectedGenreId); // Assuming BookGenresColumn.genreId exists\n  }\n\n  return FeedStreamNotifierSettings<BookModel>(\n    feedKey: 'books_feed_by_genre', // Unique key for this feed\n    clientManager: bookClientManager,\n    selectArgs: bookSelect, // Your predefined SupabaseSelectBuilderBase instance\n    fromJsonFactory: BookModel.fromJson,\n    pageSize: 20,\n    queryCustomizer: queryCustomizer,\n  );\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-use-in-a-widget",children:"2. Use in a Widget"}),"\n",(0,i.jsx)(n.p,{children:"Consume the provider in your widget to display the feed and handle interactions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class FeedTab extends ConsumerStatefulWidget {\n  // ...\n}\n\nclass _FeedTabState extends ConsumerState<FeedTab> {\n  final ScrollController _scrollController = ScrollController();\n  bool _isFetchingMore = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(_scrollListener);\n  }\n\n  // ... dispose, _scrollListener ...\n\n  Future<void> _fetchMore() async {\n    if (_isFetchingMore) return;\n    setState(() => _isFetchingMore = true);\n\n    final settings = ref.read(bookFeedProvider); // Get current settings\n    final notifier = ref.read(booksFeedProvider(settings).notifier);\n    await notifier.fetchMoreItems();\n\n    if (mounted) {\n      setState(() => _isFetchingMore = false);\n    }\n  }\n\n  void _updateSelectedGenre(String? genreId) {\n    ref.read(selectedGenreIdProvider.notifier).set(genreId);\n    // When selectedGenreIdProvider changes, bookFeedProvider will re-evaluate,\n    // providing new settings to booksFeedProvider. This causes Riverpod\n    // to potentially create a new notifier instance or rebuild the existing one\n    // with the new settings, triggering a refresh of the feed.\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final settings = ref.watch(bookFeedProvider); // Watch for settings changes\n    final booksAsyncValue = ref.watch(booksFeedProvider(settings)); // Watch the feed data, rebuilds feed on settings change\n\n    // ... UI rendering using booksAsyncValue, genre selection chips ...\n    // ListView.builder uses _scrollController\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-a-search-feed",children:"Setting up a Search Feed"}),"\n",(0,i.jsx)(n.p,{children:"A search feed allows users to input search terms, typically for full-text\nsearch. This assume that full-text search is already set up in your Supabase\ndatabase. When set up properly full-text search is fast and can provide near\nreal-time results."}),"\n",(0,i.jsxs)(n.h3,{id:"1-define-feedstreamnotifiersettings-1",children:["1. Define ",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"})]}),"\n",(0,i.jsxs)(n.p,{children:["Configure settings specifically for search, including the ",(0,i.jsx)(n.code,{children:"searchColumn"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final bookSearchSettingsProvider = Provider<FeedStreamNotifierSettings<BookModel>>((ref) {\n  final bookClientManager = ref.watch(booksManagerProvider);\n  return FeedStreamNotifierSettings<BookModel>(\n    feedKey: 'books_search_feed', // Unique key for this search feed\n    searchColumn: BooksColumn.tsvector, // The tsvector column for FTS, you manually have to pass this in.\n    clientManager: bookClientManager,\n    selectArgs: bookSelect, // Your predefined SupabaseSelectBuilderBase instance\n    fromJsonFactory: BookModel.fromJson,\n    pageSize: 20,\n    // queryCustomizer can also be used here for base filters on the search, if needed\n  );\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-use-in-a-widget-1",children:"2. Use in a Widget"}),"\n",(0,i.jsxs)(n.p,{children:["Consume the provider and use the notifier's ",(0,i.jsx)(n.code,{children:"search()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class SearchFeedTab extends ConsumerStatefulWidget {\n  // ...\n}\n\nclass _SearchFeedTabState extends ConsumerState<SearchFeedTab> {\n  final TextEditingController _searchController = TextEditingController();\n  final ScrollController _scrollController = ScrollController();\n  // ... _searchTerm, _isFetchingMore, initState, dispose, _scrollListener ...\n\n  Future<void> _fetchMore() async {\n    if (_isFetchingMore) return;\n    setState(() => _isFetchingMore = true);\n\n    final settings = ref.read(bookSearchSettingsProvider); // Get current settings\n    final notifier = ref.read(booksFeedProvider(settings).notifier);\n    await notifier.fetchMoreItems();\n\n    if (mounted) {\n      setState(() => _isFetchingMore = false);\n    }\n  }\n\n  void _performSearch() {\n    final searchTerm = _searchController.text;\n    final settings = ref.read(bookSearchSettingsProvider); // Get current settings\n    final notifier = ref.read(booksFeedProvider(settings).notifier);\n    notifier.search(searchTerm);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final settings = ref.watch(bookSearchSettingsProvider); // Watch for settings changes (if any)\n    final asyncValue = ref.watch(booksFeedProvider(settings)); // Watch the feed data\n\n    // ... UI rendering with TextField for search input, ListView for results ...\n    // ListView.builder uses _scrollController\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-features--usage-notes",children:"Key Features & Usage Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local Caching of Feed Structure"}),": The ",(0,i.jsx)(n.code,{children:"feed_item_references"})," table stores\nthe ",(0,i.jsx)(n.code,{children:"feed_key"}),", the source table of the item, the item's ID, and its display\norder. This allows for persistent, ordered feeds. The actual item data is\nfetched based on these references and also benefits from the ",(0,i.jsx)(n.code,{children:"ClientManager"}),"'s\nlocal caching of individual models. Note, this is fully managed in the\nbackground and you don't have to interact with it.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"feedKey"})," Importance"]}),": Ensure each distinct feed in your application uses\na unique ",(0,i.jsx)(n.code,{children:"feedKey"}),". This prevents data from different feeds from mixing in\nthe local ",(0,i.jsx)(n.code,{children:"feed_item_references"})," table."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Riverpod Integration"}),": Designed for seamless use with Riverpod, leveraging\n",(0,i.jsx)(n.code,{children:"FamilyStreamNotifier"})," for state management and reactivity."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pagination"}),": The ",(0,i.jsx)(n.code,{children:"fetchMoreItems()"})," method on the notifier handles loading\nsubsequent pages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Query Customization"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"queryCustomizer"})," in ",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"})," allows defining a base set\nof filters for a feed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Search"}),": The ",(0,i.jsx)(n.code,{children:"search(String terms)"})," method on the notifier triggers a new\nfetch based on the search terms against the configured ",(0,i.jsx)(n.code,{children:"searchColumn"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reactivity"}),": Feeds automatically update if the underlying\n",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"})," change (when the provider for settings is\nre-evaluated) or when methods like ",(0,i.jsx)(n.code,{children:"search"}),", ",(0,i.jsx)(n.code,{children:"refreshFeed"}),", or\n",(0,i.jsx)(n.code,{children:"fetchMoreItems"})," are called."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Stable ",(0,i.jsx)(n.code,{children:"selectArgs"})," and ",(0,i.jsx)(n.code,{children:"fromJsonFactory"})]}),": These should ideally be static\nor top-level constants/functions to ensure stability for the\n",(0,i.jsx)(n.code,{children:"FeedStreamNotifierSettings"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Disposal"}),": The notifier handles its own disposal and stops processing if\nthe widget is unmounted, preventing errors."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": The ",(0,i.jsx)(n.code,{children:"AsyncValue"})," provided by Riverpod\n(",(0,i.jsx)(n.code,{children:"asyncValue.when(...)"}),") should be used to handle loading and error states."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);