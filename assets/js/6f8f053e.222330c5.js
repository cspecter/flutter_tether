"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[664],{7750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"models","title":"Models","description":"Tether generates models for your Supabase tables and views, allowing you to","source":"@site/docs/models.md","sourceDirName":".","slug":"/models","permalink":"/flutter_tether/models","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Schema Management","permalink":"/flutter_tether/schema"},"next":{"title":"Select Builders","permalink":"/flutter_tether/select_builders"}}');var a=t(4848),i=t(8453);const r={sidebar_position:3},s="Models",d={},l=[{value:"Model Generation",id:"model-generation",level:2},{value:"Things to Note",id:"things-to-note",level:2},{value:"Relationships",id:"relationships",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"models",children:"Models"})}),"\n",(0,a.jsxs)(n.p,{children:["Tether generates models for your Supabase tables and views, allowing you to\ninteract with your data in a Flutter manner, typically to a\n",(0,a.jsx)(n.code,{children:"lib/database/models.g.dart"})," file."]}),"\n",(0,a.jsx)(n.h2,{id:"model-generation",children:"Model Generation"}),"\n",(0,a.jsxs)(n.p,{children:["Take a schema like this, where you have a ",(0,a.jsx)(n.code,{children:"books"})," table with various fields,\nincluding foreign keys to ",(0,a.jsx)(n.code,{children:"images"})," and ",(0,a.jsx)(n.code,{children:"authors"}),", and a many-to-many\nrelationship with ",(0,a.jsx)(n.code,{children:"genres"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE books (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    title TEXT NOT NULL,\n    description TEXT,\n    publication_date DATE,\n    price NUMERIC(10, 2), -- Example of a NUMERIC field for precise decimal values\n    stock_count INTEGER DEFAULT 0, -- Example of an INTEGER field\n    cover_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    banner_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    author_id UUID REFERENCES authors(id) ON DELETE SET NULL, -- Foreign key to authors\n    metadata JSONB, -- Example of a JSONB field for storing arbitrary metadata\n    tags TEXT[], -- Example of an array field for storing tags\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    document tsvector -- Column for full-text search\n);\n\nCREATE TABLE images (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    url TEXT NOT NULL, -- URL of the image\n    alt_text TEXT, -- Alternative text for the image\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE authors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    bio TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE genres (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL UNIQUE, -- Example of a UNIQUE constraint\n    description TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE book_genres (\n    book_id UUID REFERENCES books(id) ON DELETE CASCADE,\n    genre_id UUID REFERENCES genres(id) ON DELETE CASCADE,\n    PRIMARY KEY (book_id, genre_id) -- Composite primary key\n);\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tether will generate a model for each table, translating the SQLite types to\nDart types to conform to the original Postgres schema. It will also create\nrelationships between the models based on the foreign keys and many-to-many\nrelationships defined in the schema."}),"\n",(0,a.jsxs)(n.p,{children:["For the above schema, Tether will generate a ",(0,a.jsx)(n.code,{children:"BookModel"}),", ",(0,a.jsx)(n.code,{children:"ImageModel"}),",\n",(0,a.jsx)(n.code,{children:"AuthorModel"}),", ",(0,a.jsx)(n.code,{children:"GenreModel"}),", and ",(0,a.jsx)(n.code,{children:"BookGenreModel"}),". Each model will include\nfields corresponding to the columns in the table, as well as methods for\nserialization and deserialization from Supabase and SQLite."]}),"\n",(0,a.jsx)(n.p,{children:"The generated model will look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class BookModel extends TetherModel<BookModel> {\n  final String? authorId;\n  final String? bannerImageId;\n  final String? coverImageId;\n  final DateTime? createdAt;\n  final String? description;\n  final String? document;\n  final String id;\n  final Map<String, dynamic>? metadata;\n  final double? price;\n  final DateTime? publicationDate;\n  final int? stockCount;\n  final List<String>? tags;\n  final String title;\n  final DateTime? updatedAt;\n  final AuthorModel? author;\n  final ImageModel? bannerImage;\n  final ImageModel? coverImage;\n  final List<BookGenreModel>? bookGenres;\n  final List<BookstoreBookModel>? bookstoreBooks;\n\n  BookModel({\n    this.authorId,\n    this.bannerImageId,\n    this.coverImageId,\n    this.createdAt,\n    this.description,\n    this.document,\n    required this.id,\n    this.metadata,\n    this.price,\n    this.publicationDate,\n    this.stockCount,\n    this.tags,\n    required this.title,\n    this.updatedAt,\n    this.author,\n    this.bannerImage,\n    this.coverImage,\n    this.bookGenres,\n    this.bookstoreBooks,\n  }) : super({\n         'author_id': authorId,\n         'banner_image_id': bannerImageId,\n         'cover_image_id': coverImageId,\n         'created_at': createdAt,\n         'description': description,\n         'document': document,\n         'id': id,\n         'metadata': metadata,\n         'price': price,\n         'publication_date': publicationDate,\n         'stock_count': stockCount,\n         'tags': tags,\n         'title': title,\n         'updated_at': updatedAt,\n         'author': author,\n         'bannerImage': bannerImage,\n         'coverImage': coverImage,\n         'bookGenres': bookGenres,\n         'bookstoreBooks': bookstoreBooks,\n       });\n\n  /// The primary key for this model instance.\n  @override\n  String get localId => id;\n\n  /// Creates an instance from a JSON map (e.g., from Supabase).\n  factory BookModel.fromJson(Map<String, dynamic> json) {\n    ...\n  }\n\n  /// Creates an instance from a map (e.g., from SQLite row containing nested JSON in 'jsobjects' column).\n  factory BookModel.fromSqlite(Row row) {\n    ...\n  }\n\n  /// Converts the instance to a JSON map (for Supabase).\n  @override\n  Map<String, dynamic> toJson() {\n    ...\n  }\n\n  /// Converts the instance to a map suitable for SQLite insertion/update.\n  @override\n  Map<String, dynamic> toSqlite() {\n    ...\n  }\n\n  /// Creates a copy of this instance with potentially modified fields.\n  @override\n  BookModel copyWith\n\n  @override\n  String toString() {\n    return 'BookModel(authorId: $authorId, bannerImageId: $bannerImageId, coverImageId: $coverImageId, createdAt: $createdAt, description: $description, document: $document, id: $id, metadata: $metadata, price: $price, publicationDate: $publicationDate, stockCount: $stockCount, tags: $tags, title: $title, updatedAt: $updatedAt, author: $author, bannerImage: $bannerImage, coverImage: $coverImage, bookGenres: $bookGenres, bookstoreBooks: $bookstoreBooks)';\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Factories are provided to connect and translate the data from Supabase and\nSQLite to the model. These are consumed by the Managers and you typically will\nnot need to interact with them directly."}),"\n",(0,a.jsx)(n.h2,{id:"things-to-note",children:"Things to Note"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Typical SQL snake case conventions are translated to camel case in Dart. For\nexample, ",(0,a.jsx)(n.code,{children:"created_at"})," becomes ",(0,a.jsx)(n.code,{children:"createdAt"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"relationships",children:"Relationships"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Relationships to other models are generated off the foreign keys for forward\nrelationships, thus ",(0,a.jsx)(n.code,{children:"author_id"})," will become 'author' in the books model. The\nconfig file lets you set custom ",(0,a.jsx)(n.code,{children:"sanitization_endings"})," to remove suffixes like\n",(0,a.jsx)(n.code,{children:"_id"})," or ",(0,a.jsx)(n.code,{children:"_fk"})," from the model names."]}),"\n",(0,a.jsxs)(n.li,{children:["Many-to-many relationships are represented as lists of models. For example,\nthe ",(0,a.jsx)(n.code,{children:"book_genres"})," table will create a ",(0,a.jsx)(n.code,{children:"List<BookGenreModel>"})," as ",(0,a.jsx)(n.code,{children:"bookGenres"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);