"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{2053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"intro","title":"About Tether","description":"Tether is an opinionated library that connects Supabase and a Flutter app.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/flutter_tether/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Schema Management","permalink":"/flutter_tether/schema"}}');var a=t(4848),s=t(8453);const i={sidebar_position:1},o="About Tether",l={},d=[{value:"Why Tether?",id:"why-tether",level:2},{value:"Technology",id:"technology",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Create the Config files",id:"create-the-config-files",level:3},{value:"Run the generator",id:"run-the-generator",level:2},{value:"Database",id:"database",level:3},{value:"Models",id:"models",level:3},{value:"Select Builders",id:"select-builders",level:3},{value:"Managers",id:"managers",level:3},{value:"TetherClientReturn",id:"tetherclientreturn",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"about-tether",children:"About Tether"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Tether"})," is an opinionated library that connects Supabase and a Flutter app."]}),"\n",(0,a.jsx)(n.p,{children:"Tether does the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Creates and manages a local database"})," for your application using SQLite.\nManages migrations and schema updates automatically. Automatically mirrors the\nPostgres DB schema locally, including all relationships."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Generates Dart models"})," from your Supabase database schema, allowing you to\nwork with your data in a type-safe manner."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Provides a wrapper around the Supabase API"})," to simplify interactions\nbetween the remote and local database. Automatically handles caching,\noptimistic updates, synchronization, and conflict resolution between the two."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Select builders"})," Creates a set of query builders that allow you to\nconstruct complex queries in a simplified, dart-compliant, and reusable\nmanner."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Supports real-time updates"})," from Supabase."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Provides a set of utilities"})," to simplify common tasks, such as managing\nauthentication and profiles, managing feeds, full-text search, managing user\npreferences, and running code in a background service."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"why-tether",children:"Why Tether?"}),"\n",(0,a.jsx)(n.p,{children:"Supabase is an amazing platform and Postgres is a powerful database. However,\nSupabase did not include class generation out of the box for Dart like they do\nfor Javascript. It does include first-class support of GraphQL, but I found that\ncumbersome to work with, especially when you have the need to cache data locally\nand synchronize it with the remote database. When you factor in the typical need\nfor full-text search, I ended up with a very complicated system for interacting\nwithin my Flutter apps. You could not get around the need to use both the\nSupabase API, interact with GraphQL and a third-party search service (and\nassociated synchronization complexity). My ideal solution was to centralize all\nthese services through Supabase so that there was a simplified point of\ninteraction."}),"\n",(0,a.jsx)(n.h2,{id:"technology",children:"Technology"}),"\n",(0,a.jsx)(n.p,{children:"Tether is built on top of the following technologies:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://supabase.com/",children:"Supabase"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://pub.dev/packages/sqlite_async",children:"SQLite Async"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://riverpod.dev/",children:"Riverpod"})," - Not required, but a lot of extended\nfeatures are built on top of Riverpod."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://pub.dev/packages/flutter_background_service",children:"flutter_background_service"})," -\nOnly required if you use the background services."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsx)(n.p,{children:"To install Tether add the following to your project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install the dependencies\nflutter pub add tether_libs supabase_flutter sqlite_async sqlite3_flutter_libs supabase equatable uuid\n\n# Install the generator\nflutter pub add -d tether\n\n# If you want to use the Riverpod features\nflutter pub add flutter_riverpod\n\n# If you want to use the background service\nflutter pub add flutter_background_service\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create-the-config-files",children:"Create the Config files"}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"tether.yaml"})," file in the root of your project. You should not have to\nchange many of these settings, but best practice is to either include all the\ntables you need or exclude the ones you do not need."]}),"\n",(0,a.jsxs)(n.p,{children:["Use the full table name plus the schema name, e.g. ",(0,a.jsx)(n.code,{children:"public.profiles"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"database:\n  host: TETHER_SUPABASE_HOST \n  port: TETHER_PORT_NAME \n  database: TETHER_DB_NAME \n  username: TETHER_DB_USERNAME \n  password: TETHER_DB_PASSWORD \n  ssl: TETHER_SSL \n\ngeneration:\n  output_directory: lib/database\n  exclude_tables:\n    - '_realtime.*'\n    - 'auth.*'\n    - 'net.*'\n    - 'pgsodium.*'\n    - 'realtime.*'\n    - 'storage.*'\n    - 'supabase_functions.*'\n    - 'vault.*'\n  include_tables: []\n  exclude_references: []\n  generate_for_all_tables: true\n\n  databaseName: 'app_db.sqlite'\n\n  models:\n    enabled: true \n    filename: models.g.dart\n    prefix: ''\n    suffix: Model\n    use_null_safety: true\n\n  supabase_select_builders:\n    enabled: true \n    filename: 'supabase_select_builders.g.dart'\n    generated_schema_dart_file_name: 'supabase_schema.g.dart'\n    suffix: SelectBuilder\n\n  schema_registry_file_name: 'schema_registry.g.dart'\n\n  sqlite_migrations:\n    enabled: true \n    output_subdir: 'sqlite_migrations'\n\n  client_managers:\n    enabled: true \n    use_riverpod: true\n\n  providers:\n    enabled: true \n    output_subdir: 'providers'\n\n  authentication:\n    enabled: true\n    profile_table: 'profiles' \n\n  background_services:\n    enabled: true\n\n  user_preferences:\n    enabled: true\n\n  sanitization_endings:\n    - _id\n    - _fk\n    - _uuid\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a '.env' file at the root of your project and put in the secrets for\nconnecting to your Supabase database. Make sure to gitignore this file."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-env",children:"TETHER_SUPABASE_HOST=your_supabase_host\nTETHER_PORT_NAME=5432\nTETHER_DB_NAME=your_database_name\nTETHER_DB_USERNAME=your_database_username\nTETHER_DB_PASSWORD=your_database_password\nTETHER_SSL=true\n"})}),"\n",(0,a.jsx)(n.h2,{id:"run-the-generator",children:"Run the generator"}),"\n",(0,a.jsx)(n.p,{children:"Run the generator to create the necessary files:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dart run flutter_tether --config tether.yaml\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will generate the necessary files in the ",(0,a.jsx)(n.code,{children:"lib/database"})," directory by\ndefault."]}),"\n",(0,a.jsx)(n.h1,{id:"using-tether",children:"Using Tether"}),"\n",(0,a.jsx)(n.p,{children:"Tether is made to be accessed via Riverpod. Check the documents for other ways\nto access."}),"\n",(0,a.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final db = ref.watch(databaseProvider);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"models",children:"Models"}),"\n",(0,a.jsx)(n.p,{children:"Type-safe Dart classes automatically generated from your database schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Generated from your 'books' table\nfinal book = BookModel(\n  id: '123',\n  title: 'Flutter Development Guide',\n  authorId: 'author-456',\n  published: true,\n  createdAt: DateTime.now(),\n);\n\n// Convert to/from JSON and SQLite\nfinal json = book.toJson();\nfinal fromJson = BookModel.fromJson(json);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"select-builders",children:"Select Builders"}),"\n",(0,a.jsx)(n.p,{children:"Select builders allow you to construct complex queries in a type-safe manner:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final imageSelect = ImagesSelectBuilder().select();\n\nfinal genreSelect = GenresSelectBuilder().select();\n\nfinal authorSelect = AuthorsSelectBuilder().select();\n\nfinal bookGenreSelect = BookGenresSelectBuilder().select().withGenre(\n  genreSelect,\n);\n\nfinal bookSelect = BooksSelectBuilder()\n    .select()\n    .withAuthor(authorSelect)\n    .withBookGenres(bookGenreSelect.withGenre(genreSelect))\n    .withCoverImage(imageSelect)\n    .withBannerImage(imageSelect);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"managers",children:"Managers"}),"\n",(0,a.jsx)(n.p,{children:"Managers provide a layer for CRUD operations with caching, synchronization, and\ncount tracking:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final bookManager = ref.watch(bookManagerProvider);\n\n// Query returns TetherClientReturn<BookModel> with data and count\nfinal result = await bookManager.query\n  .select(bookSelect)\n  .eq(BookColumns.published, true)\n  .order(BookColumns.createdAt, ascending: false)\n  .limit(10);\n\n// Access the data and count\nfinal books = result.data; // List<BookModel>\nfinal totalCount = result.count; // int? - total number of matching records\nfinal hasError = result.hasError; // bool - whether an error occurred\n\n// For streaming with count tracking\nfinal booksStream = bookManager.query\n  .select(bookSelect)\n  .eq(BookColumns.published, true)\n  .asStream(); // Stream<TetherClientReturn<BookModel>>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"tetherclientreturn",children:"TetherClientReturn"}),"\n",(0,a.jsxs)(n.p,{children:["All manager operations now return a ",(0,a.jsx)(n.code,{children:"TetherClientReturn<TModel>"})," object that\nincludes:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"data"}),": ",(0,a.jsx)(n.code,{children:"List<TModel>"})," - The actual model instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"count"}),": ",(0,a.jsx)(n.code,{children:"int?"})," - Total count of records matching the query (when available)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"error"}),": ",(0,a.jsx)(n.code,{children:"String?"})," - Error message if an error occurred"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"hasError"}),": ",(0,a.jsx)(n.code,{children:"bool"})," - Convenience getter for checking if an error occurred"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"single"}),": ",(0,a.jsx)(n.code,{children:"TModel"})," - Convenience getter for getting the first item (throws if\nempty)"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This provides better information about query results, especially for pagination\nand UI state management."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);