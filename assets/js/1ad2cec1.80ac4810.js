"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[191],{4617:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"additional_features/user_preferences_manager","title":"User Preferences Manager","description":"The UserPreferencesManager is a powerful utility class generated by Tether","source":"@site/docs/additional_features/user_preferences_manager.md","sourceDirName":"additional_features","slug":"/additional_features/user_preferences_manager","permalink":"/flutter_tether/additional_features/user_preferences_manager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Auth Manager","permalink":"/flutter_tether/additional_features/auth_manager"},"next":{"title":"Background Service: Background Job Processing","permalink":"/flutter_tether/additional_features/background_manager"}}');var t=r(4848),a=r(8453);const i={sidebar_position:3},l="User Preferences Manager",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Supported Data Types",id:"supported-data-types",level:2},{value:"Setup &amp; Configuration",id:"setup--configuration",level:2},{value:"1. Enable in Configuration",id:"1-enable-in-configuration",level:3},{value:"2. Generated Files",id:"2-generated-files",level:3},{value:"3. Database Schema",id:"3-database-schema",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Accessing the Manager",id:"accessing-the-manager",level:3},{value:"Setting Preferences",id:"setting-preferences",level:3},{value:"Simple Values",id:"simple-values",level:4},{value:"Complex Objects",id:"complex-objects",level:4},{value:"Arrays",id:"arrays",level:4},{value:"Getting Preferences",id:"getting-preferences",level:3},{value:"Simple Values",id:"simple-values-1",level:4},{value:"Complex Objects",id:"complex-objects-1",level:4},{value:"Arrays",id:"arrays-1",level:4},{value:"Reactive UI with Riverpod Providers",id:"reactive-ui-with-riverpod-providers",level:2},{value:"Simple Preference Providers",id:"simple-preference-providers",level:3},{value:"Complex Object Providers",id:"complex-object-providers",level:3},{value:"Using Providers in Widgets",id:"using-providers-in-widgets",level:3},{value:"Provider Family for Dynamic Keys",id:"provider-family-for-dynamic-keys",level:3},{value:"Reactive UI with StreamBuilder (Alternative)",id:"reactive-ui-with-streambuilder-alternative",level:2},{value:"Watching Simple Preferences",id:"watching-simple-preferences",level:3},{value:"Watching Complex Objects",id:"watching-complex-objects",level:3},{value:"Default Preferences",id:"default-preferences",level:2},{value:"Setting Up Defaults",id:"setting-up-defaults",level:3},{value:"App Initialization",id:"app-initialization",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Raw Preference Access",id:"raw-preference-access",level:3},{value:"Preference Deletion",id:"preference-deletion",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Riverpod Providers (Recommended)",id:"1-use-riverpod-providers-recommended",level:3},{value:"2. Type Safety",id:"2-type-safety",level:3},{value:"3. Consistent Value Types",id:"3-consistent-value-types",level:3},{value:"4. Default Values",id:"4-default-values",level:3},{value:"5. Performance Considerations",id:"5-performance-considerations",level:3},{value:"6. Migration Strategy",id:"6-migration-strategy",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"user-preferences-manager",children:"User Preferences Manager"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"UserPreferencesManager"})," is a powerful utility class generated by Tether\nthat provides a type-safe, reactive way to store and manage user preferences in\nyour Flutter application. It uses a local SQLite database to persist key-value\npairs with automatic JSON serialization/deserialization and supports streaming\nupdates for reactive UI components."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"UserPreferencesManager"})," simplifies user preference management by:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type-Safe Storage"}),": Store any JSON-serializable data with the help of the\n",(0,t.jsx)(n.code,{children:"UserPreferenceValueType"})," enum."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Serialization"}),": Handles JSON encoding/decoding automatically."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reactive Streams"}),": Watch preferences for real-time UI updates using\n",(0,t.jsx)(n.code,{children:"watchPreference"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Values"}),": Easily set up default preferences on first app launch with\n",(0,t.jsx)(n.code,{children:"ensureDefaultPreferences"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rich Data Types"}),": Support for primitives, arrays, and complex objects."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Upsert Operations"}),": ",(0,t.jsx)(n.code,{children:"setPreference"})," automatically creates or updates\npreferences."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"supported-data-types",children:"Supported Data Types"}),"\n",(0,t.jsxs)(n.p,{children:["The manager supports various data types through the ",(0,t.jsx)(n.code,{children:"UserPreferenceValueType"}),"\nenum:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Enum Value"}),(0,t.jsx)(n.th,{children:"String Constant (DB)"}),(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Example Value (Dart)"}),(0,t.jsxs)(n.th,{children:[(0,t.jsx)(n.code,{children:"fromJson"})," Example (jsonData as Type)"]})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Text"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"text"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'text'"})}),(0,t.jsx)(n.td,{children:"Simple strings"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"User Name"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData as String?"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Integer"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"integer"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'integer'"})}),(0,t.jsx)(n.td,{children:"Whole numbers"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"123"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData as int?"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Number"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'number'"})}),(0,t.jsx)(n.td,{children:"Decimal/floating-point"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"3.14159"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"(jsonData as num?)?.toDouble()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'boolean'"})}),(0,t.jsx)(n.td,{children:"True/false values"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData as bool?"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"DateTime"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"datetime"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'datetime'"})}),(0,t.jsx)(n.td,{children:"Date and time values"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"2023-10-27T10:00:00Z"'})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : DateTime.parse(jsonData as String)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Text Array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"stringList"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'stringList'"})}),(0,t.jsx)(n.td,{children:"Lists of strings"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"['apple', 'banana']"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : List<String>.from(jsonData as List)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Integer Array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"integerArray"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'integerArray'"})}),(0,t.jsx)(n.td,{children:"Lists of whole numbers"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[1, 2, 3]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : List<int>.from(jsonData as List)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Number Array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"numberArray"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'numberArray'"})}),(0,t.jsx)(n.td,{children:"Lists of decimal numbers"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[1.1, 2.2, 3.3]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : List<double>.from((jsonData as List).map((e) => (e as num).toDouble()))"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"JSON Object"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonObject"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'jsonObject'"})}),(0,t.jsx)(n.td,{children:"Complex structured objects"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"{'key': 'value', 'count': 1}"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : Map<String, dynamic>.from(jsonData as Map)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"JSON Array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonArray"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'jsonArray'"})}),(0,t.jsx)(n.td,{children:"Lists of complex objects"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"[{'id':1}, {'id':2}]"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : List<dynamic>.from(jsonData as List)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Text Array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"textArray"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"'textArray'"})}),(0,t.jsxs)(n.td,{children:["Lists of strings (alternative to ",(0,t.jsx)(n.code,{children:"stringList"}),")"]}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"['itemA', 'itemB']"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"jsonData == null ? null : List<String>.from(jsonData as List)"})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['The "Enum Value" column shows the actual enum case (e.g.,\n',(0,t.jsx)(n.code,{children:"UserPreferenceValueType.text"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:['The "String Constant (DB)" column shows the string representation used for\nstorage in the database (e.g., ',(0,t.jsx)(n.code,{children:"'text'"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stringList"})," and ",(0,t.jsx)(n.code,{children:"textArray"})," both represent an array of strings. ",(0,t.jsx)(n.code,{children:"stringList"}),"\nmight be present for historical reasons or specific use cases, while\n",(0,t.jsx)(n.code,{children:"textArray"})," is a more explicit name. Choose one consistently or as per your\nproject's convention. The generated ",(0,t.jsx)(n.code,{children:"userPreferenceValueTypeToString"}),' function\nmight map both to the same string (e.g., "textArray") for database storage.']}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup--configuration",children:"Setup & Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"1-enable-in-configuration",children:"1. Enable in Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Ensure User Preferences are enabled in your ",(0,t.jsx)(n.code,{children:"tether.yaml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# tether.yaml\ngeneration:\n  # ... other settings\n  user_preferences:\n    enabled: true # Enables generation of UserPreferencesManager\n\n  # If using Riverpod, ensure providers are enabled:\n  client_managers:\n    enabled: true\n    use_riverpod: true\n  providers:\n    enabled: true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-generated-files",children:"2. Generated Files"}),"\n",(0,t.jsx)(n.p,{children:"Tether generates:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"lib/database/managers/user_preferences_manager.g.dart"})}),": The core manager\nclass"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database migration"}),": Creates the ",(0,t.jsx)(n.code,{children:"user_preferences"})," table automatically"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-database-schema",children:"3. Database Schema"}),"\n",(0,t.jsx)(n.p,{children:"The manager uses this SQLite table structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE user_preferences (\n    preference_key TEXT PRIMARY KEY,\n    preference_value TEXT NOT NULL,  -- JSON-encoded value\n    value_type TEXT NOT NULL,        -- One of UserPreferenceValueType\n    created_at INTEGER DEFAULT (unixepoch()),\n    updated_at INTEGER DEFAULT (unixepoch())\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"accessing-the-manager",children:"Accessing the Manager"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// With Riverpod (recommended)\nfinal prefsManager = ref.watch(userPreferencesManagerProvider);\n\n// Direct instantiation\nfinal prefsManager = UserPreferencesManager(yourSqliteDatabase);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-preferences",children:"Setting Preferences"}),"\n",(0,t.jsx)(n.h4,{id:"simple-values",children:"Simple Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Store a string\nawait prefsManager.setPreference(\n  'username',\n  'john_doe',\n  valueType: UserPreferenceValueType.text,\n);\n\n// Store a boolean\nawait prefsManager.setPreference(\n  'notifications_enabled',\n  true,\n  valueType: UserPreferenceValueType.boolean,\n);\n\n// Store a number (float/double)\nawait prefsManager.setPreference(\n  'user_score',\n  85.5,\n  valueType: UserPreferenceValueType.number,\n);\n\n// Store a DateTime (as ISO8601 string)\nawait prefsManager.setPreference(\n  'last_login',\n  DateTime.now().toIso8601String(),\n  valueType: UserPreferenceValueType.datetime,\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"complex-objects",children:"Complex Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Store an object\nclass UserSettings {\n  final String theme;\n  final bool darkMode;\n  final List<String> languages;\n\n  UserSettings({\n    required this.theme,\n    required this.darkMode,\n    required this.languages,\n  });\n\n  Map<String, dynamic> toJson() => {\n    'theme': theme,\n    'darkMode': darkMode,\n    'languages': languages,\n  };\n\n  factory UserSettings.fromJson(Map<String, dynamic> json) => UserSettings(\n    theme: json['theme'] as String,\n    darkMode: json['darkMode'] as bool,\n    languages: List<String>.from(json['languages'] as List),\n  );\n}\n\n// Store the settings object\nfinal settings = UserSettings(\n  theme: 'blue',\n  darkMode: true,\n  languages: ['en', 'es'],\n);\n\nawait prefsManager.setPreference<Map<String, dynamic>>( // Explicitly type T for complex objects\n  'user_settings',\n  settings.toJson(), // Value must be JSON encodable (e.g., Map<String, dynamic>)\n  valueType: UserPreferenceValueType.jsonObject,\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"arrays",children:"Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Store a list of strings\nawait prefsManager.setPreference<List<String>>(\n  'favorite_categories',\n  ['technology', 'sports', 'music'],\n  valueType: UserPreferenceValueType.stringList, // or .textArray\n);\n\n// Store a list of numbers\nawait prefsManager.setPreference<List<double>>(\n  'graph_points',\n  [10.2, 15.5, 12.0],\n  valueType: UserPreferenceValueType.numberArray,\n);\n\n// Store a list of objects (maps)\nfinal recentSearches = [\n  {'query': 'flutter', 'timestamp': DateTime.now().millisecondsSinceEpoch},\n  {'query': 'dart', 'timestamp': DateTime.now().millisecondsSinceEpoch},\n];\n\nawait prefsManager.setPreference<List<Map<String, dynamic>>>(\n  'recent_searches',\n  recentSearches,\n  valueType: UserPreferenceValueType.jsonArray,\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getting-preferences",children:"Getting Preferences"}),"\n",(0,t.jsx)(n.h4,{id:"simple-values-1",children:"Simple Values"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Get a string, providing a default if null\nfinal username = await prefsManager.getPreference<String>(\n  'username',\n  fromJson: (jsonData) => jsonData as String? ?? 'Guest',\n);\n\n// Get a boolean, providing a default\nfinal notificationsEnabled = await prefsManager.getPreference<bool>(\n  'notifications_enabled',\n  fromJson: (jsonData) => jsonData as bool? ?? true,\n);\n\n// Get a number (double), providing a default\nfinal userScore = await prefsManager.getPreference<double>(\n  'user_score',\n  fromJson: (jsonData) => (jsonData as num?)?.toDouble() ?? 0.0,\n);\n\n// Get a DateTime (parsed from ISO8601 string)\nfinal lastLogin = await prefsManager.getPreference<DateTime?>(\n  'last_login',\n  fromJson: (jsonData) => jsonData == null ? null : DateTime.tryParse(jsonData as String),\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"complex-objects-1",children:"Complex Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Get an object\nfinal settings = await prefsManager.getPreference<UserSettings?>(\n  'user_settings',\n  fromJson: (jsonData) {\n    if (jsonData == null) return null;\n    return UserSettings.fromJson(jsonData as Map<String, dynamic>);\n  },\n);\n\n// Get with fallback to a default instance\nfinal settingsWithDefault = await prefsManager.getPreference<UserSettings>(\n  'user_settings',\n  fromJson: (jsonData) {\n    if (jsonData == null) {\n      return UserSettings(theme: 'default', darkMode: false, languages: ['en']); // Default instance\n    }\n    return UserSettings.fromJson(jsonData as Map<String, dynamic>);\n  },\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"arrays-1",children:"Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Get a list of strings\nfinal categories = await prefsManager.getPreference<List<String>>(\n  'favorite_categories',\n  fromJson: (jsonData) => jsonData != null \n    ? List<String>.from(jsonData as List) \n    : <String>[], // Default to empty list\n);\n\n// Get a list of maps (representing objects)\nfinal searches = await prefsManager.getPreference<List<Map<String, dynamic>>>(\n  'recent_searches',\n  fromJson: (jsonData) => jsonData != null\n    ? List<Map<String, dynamic>>.from(jsonData as List)\n    : <Map<String, dynamic>>[], // Default to empty list\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reactive-ui-with-riverpod-providers",children:"Reactive UI with Riverpod Providers"}),"\n",(0,t.jsx)(n.p,{children:"For the most seamless integration with your app's state management, create\nRiverpod providers that wrap your preference streams:"}),"\n",(0,t.jsx)(n.h3,{id:"simple-preference-providers",children:"Simple Preference Providers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Create providers for commonly used preferences\nfinal notificationsEnabledProvider = StreamProvider<bool>((ref) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<bool>(\n    'notifications_enabled',\n    fromJson: (json) => json as bool? ?? true,\n  );\n});\n\nfinal userThemeProvider = StreamProvider<String>((ref) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<String>(\n    'theme',\n    fromJson: (json) => json as String? ?? 'default',\n  );\n});\n\nfinal favoriteCategories = StreamProvider<List<String>>((ref) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<List<String>>(\n    'favorite_categories',\n    fromJson: (json) => json != null \n      ? List<String>.from(json as List) \n      : <String>[],\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"complex-object-providers",children:"Complex Object Providers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final userSettingsProvider = StreamProvider<UserSettings>((ref) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<UserSettings>(\n    'user_settings',\n    fromJson: (json) {\n      if (json == null) {\n        return UserSettings(\n          theme: 'default',\n          darkMode: false,\n          languages: ['en'],\n        );\n      }\n      return UserSettings.fromJson(json as Map<String, dynamic>);\n    },\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-providers-in-widgets",children:"Using Providers in Widgets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class NotificationToggle extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final notificationsAsync = ref.watch(notificationsEnabledProvider);\n    final prefsManager = ref.watch(userPreferencesManagerProvider);\n    \n    return notificationsAsync.when(\n      data: (isEnabled) => SwitchListTile(\n        title: Text('Enable Notifications'),\n        value: isEnabled,\n        onChanged: (value) async {\n          await prefsManager.setPreference(\n            'notifications_enabled',\n            value,\n            valueType: UserPreferenceValueType.boolean,\n          );\n        },\n      ),\n      loading: () => ListTile(\n        title: Text('Enable Notifications'),\n        trailing: CircularProgressIndicator(strokeWidth: 2),\n      ),\n      error: (error, stack) => ListTile(\n        title: Text('Enable Notifications'),\n        subtitle: Text('Error: $error'),\n      ),\n    );\n  }\n}\n\nclass ThemeSelector extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final settingsAsync = ref.watch(userSettingsProvider);\n    final prefsManager = ref.watch(userPreferencesManagerProvider);\n    \n    return settingsAsync.when(\n      data: (settings) => Column(\n        children: [\n          ListTile(\n            title: Text('Theme'),\n            trailing: DropdownButton<String>(\n              value: settings.theme,\n              items: ['default', 'blue', 'green'].map((theme) =>\n                DropdownMenuItem(value: theme, child: Text(theme))\n              ).toList(),\n              onChanged: (newTheme) async {\n                if (newTheme != null) {\n                  final updatedSettings = UserSettings(\n                    theme: newTheme,\n                    darkMode: settings.darkMode,\n                    languages: settings.languages,\n                  );\n                  await prefsManager.setPreference(\n                    'user_settings',\n                    updatedSettings.toJson(),\n                    valueType: UserPreferenceValueType.jsonObject,\n                  );\n                }\n              },\n            ),\n          ),\n          SwitchListTile(\n            title: Text('Dark Mode'),\n            value: settings.darkMode,\n            onChanged: (value) async {\n              final updatedSettings = UserSettings(\n                theme: settings.theme,\n                darkMode: value,\n                languages: settings.languages,\n              );\n              await prefsManager.setPreference(\n                'user_settings',\n                updatedSettings.toJson(),\n                valueType: UserPreferenceValueType.jsonObject,\n              );\n            },\n          ),\n        ],\n      ),\n      loading: () => Column(\n        children: [\n          ListTile(\n            title: Text('Theme'),\n            trailing: CircularProgressIndicator(strokeWidth: 2),\n          ),\n          ListTile(\n            title: Text('Dark Mode'),\n            trailing: CircularProgressIndicator(strokeWidth: 2),\n          ),\n        ],\n      ),\n      error: (error, stack) => ListTile(\n        title: Text('Settings Error'),\n        subtitle: Text(error.toString()),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"provider-family-for-dynamic-keys",children:"Provider Family for Dynamic Keys"}),"\n",(0,t.jsx)(n.p,{children:"For preferences with dynamic keys, use a provider family:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final dynamicPreferenceProvider = StreamProvider.family<String, String>((ref, key) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<String>(\n    key,\n    fromJson: (json) => json as String? ?? '',\n  );\n});\n\n// Usage\nclass DynamicPreferenceWidget extends ConsumerWidget {\n  final String preferenceKey;\n  \n  const DynamicPreferenceWidget({required this.preferenceKey});\n  \n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final valueAsync = ref.watch(dynamicPreferenceProvider(preferenceKey));\n    \n    return valueAsync.when(\n      data: (value) => Text('$preferenceKey: $value'),\n      loading: () => CircularProgressIndicator(),\n      error: (error, stack) => Text('Error: $error'),\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reactive-ui-with-streambuilder-alternative",children:"Reactive UI with StreamBuilder (Alternative)"}),"\n",(0,t.jsx)(n.p,{children:"If you prefer using StreamBuilder directly instead of Riverpod providers:"}),"\n",(0,t.jsx)(n.h3,{id:"watching-simple-preferences",children:"Watching Simple Preferences"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class NotificationToggle extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final prefsManager = ref.watch(userPreferencesManagerProvider);\n    \n    return StreamBuilder<bool>(\n      stream: prefsManager.watchPreference<bool>(\n        'notifications_enabled',\n        fromJson: (json) => json as bool? ?? true,\n      ),\n      builder: (context, snapshot) {\n        final isEnabled = snapshot.data ?? true;\n        \n        return SwitchListTile(\n          title: Text('Enable Notifications'),\n          value: isEnabled,\n          onChanged: (value) async {\n            await prefsManager.setPreference(\n              'notifications_enabled',\n              value,\n              valueType: UserPreferenceValueType.boolean,\n            );\n          },\n        );\n      },\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"watching-complex-objects",children:"Watching Complex Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class ThemeSelector extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final prefsManager = ref.watch(userPreferencesManagerProvider);\n    \n    return StreamBuilder<UserSettings?>(\n      stream: prefsManager.watchPreference<UserSettings?>(\n        'user_settings',\n        fromJson: (json) {\n          if (json == null) return null;\n          return UserSettings.fromJson(json as Map<String, dynamic>);\n        },\n      ),\n      builder: (context, snapshot) {\n        final settings = snapshot.data ?? UserSettings(\n          theme: 'default',\n          darkMode: false,\n          languages: ['en'],\n        );\n        \n        return Column(\n          children: [\n            ListTile(\n              title: Text('Theme: ${settings.theme}'),\n              trailing: DropdownButton<String>(\n                value: settings.theme,\n                items: ['default', 'blue', 'green'].map((theme) =>\n                  DropdownMenuItem(value: theme, child: Text(theme))\n                ).toList(),\n                onChanged: (newTheme) async {\n                  if (newTheme != null) {\n                    final updatedSettings = UserSettings(\n                      theme: newTheme,\n                      darkMode: settings.darkMode,\n                      languages: settings.languages,\n                    );\n                    await prefsManager.setPreference(\n                      'user_settings',\n                      updatedSettings.toJson(),\n                      valueType: UserPreferenceValueType.jsonObject,\n                    );\n                  }\n                },\n              ),\n            ),\n            SwitchListTile(\n              title: Text('Dark Mode'),\n              value: settings.darkMode,\n              onChanged: (value) async {\n                final updatedSettings = UserSettings(\n                  theme: settings.theme,\n                  darkMode: value,\n                  languages: settings.languages,\n                );\n                await prefsManager.setPreference(\n                  'user_settings',\n                  updatedSettings.toJson(),\n                  valueType: UserPreferenceValueType.jsonObject,\n                );\n              },\n            ),\n          ],\n        );\n      },\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"default-preferences",children:"Default Preferences"}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-defaults",children:"Setting Up Defaults"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class PreferencesService {\n  final UserPreferencesManager _prefsManager;\n  \n  PreferencesService(this._prefsManager);\n  \n  Future<void> initializeDefaults() async {\n    await _prefsManager.ensureDefaultPreferences({\n      'theme': (value: 'default', valueType: UserPreferenceValueType.text),\n      'notifications_enabled': (value: true, valueType: UserPreferenceValueType.boolean),\n      'user_score': (value: 0.0, valueType: UserPreferenceValueType.real),\n      'favorite_categories': (\n        value: ['general'], \n        valueType: UserPreferenceValueType.textArray\n      ),\n      'user_settings': (\n        value: {\n          'theme': 'default',\n          'darkMode': false,\n          'languages': ['en'],\n        },\n        valueType: UserPreferenceValueType.jsonObject\n      ),\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"app-initialization",children:"App Initialization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class MyApp extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    return FutureBuilder(\n      future: _initializeApp(ref),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return MaterialApp(\n            home: Scaffold(\n              body: Center(child: CircularProgressIndicator()),\n            ),\n          );\n        }\n        \n        return MaterialApp(\n          title: 'My App',\n          home: HomeScreen(),\n        );\n      },\n    );\n  }\n  \n  Future<void> _initializeApp(WidgetRef ref) async {\n    final prefsManager = ref.read(userPreferencesManagerProvider);\n    final preferencesService = PreferencesService(prefsManager);\n    await preferencesService.initializeDefaults();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"raw-preference-access",children:"Raw Preference Access"}),"\n",(0,t.jsx)(n.p,{children:"For debugging or advanced use cases, you can access raw preference data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Get raw preference data\nfinal rawData = await prefsManager.getRawPreference('user_settings');\nprint('Key: ${rawData?['preference_key']}');\nprint('Value: ${rawData?['preference_value']}');\nprint('Type: ${rawData?['value_type']}');\n\n// Watch raw preference changes\nprefsManager.watchRawPreference('user_settings').listen((rawData) {\n  if (rawData != null) {\n    print('Raw preference updated: $rawData');\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"preference-deletion",children:"Preference Deletion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Delete a specific preference\nawait prefsManager.deletePreference('old_setting');\n\n// Check if preference exists\nfinal exists = await prefsManager.getRawPreference('some_key') != null;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Robust preference retrieval with error handling\nFuture<UserSettings> getUserSettings() async {\n  try {\n    final settings = await prefsManager.getPreference<UserSettings?>(\n      'user_settings',\n      fromJson: (json) {\n        if (json == null) return null;\n        return UserSettings.fromJson(json as Map<String, dynamic>);\n      },\n    );\n    \n    return settings ?? UserSettings.defaultSettings();\n  } catch (e) {\n    print('Error loading user settings: $e');\n    return UserSettings.defaultSettings();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-riverpod-providers-recommended",children:"1. Use Riverpod Providers (Recommended)"}),"\n",(0,t.jsx)(n.p,{children:"Create dedicated providers for your preferences rather than accessing the\nmanager directly in widgets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Good - Declarative and reactive\nfinal themeProvider = StreamProvider<String>((ref) {\n  final prefsManager = ref.watch(userPreferencesManagerProvider);\n  return prefsManager.watchPreference<String>(\n    'theme',\n    fromJson: (json) => json as String? ?? 'default',\n  );\n});\n\n// Less ideal - Direct access in widget\nclass SomeWidget extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final prefsManager = ref.watch(userPreferencesManagerProvider);\n    return StreamBuilder<String>(\n      stream: prefsManager.watchPreference<String>('theme', fromJson: ...),\n      // ...\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-type-safety",children:"2. Type Safety"}),"\n",(0,t.jsx)(n.p,{children:"Always use specific types and proper fromJson functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Good\nfinal count = await prefsManager.getPreference<int>(\n  'item_count',\n  fromJson: (json) => json as int? ?? 0,\n);\n\n// Avoid\nfinal count = await prefsManager.getPreference<dynamic>(\n  'item_count',\n  fromJson: (json) => json,\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-consistent-value-types",children:"3. Consistent Value Types"}),"\n",(0,t.jsxs)(n.p,{children:["Use the appropriate ",(0,t.jsx)(n.code,{children:"UserPreferenceValueType"})," for your data:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Good - matches the actual data type\nawait prefsManager.setPreference(\n  'categories',\n  ['tech', 'sports'],\n  valueType: UserPreferenceValueType.textArray,\n);\n\n// Avoid - inconsistent with data structure\nawait prefsManager.setPreference(\n  'categories',\n  ['tech', 'sports'],\n  valueType: UserPreferenceValueType.text, // Wrong type\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-default-values",children:"4. Default Values"}),"\n",(0,t.jsx)(n.p,{children:"Always provide sensible defaults in your fromJson functions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Good - handles null case\nfinal theme = await prefsManager.getPreference<String>(\n  'theme',\n  fromJson: (json) => json as String? ?? 'default',\n);\n\n// Risky - could return null unexpectedly\nfinal theme = await prefsManager.getPreference<String?>(\n  'theme',\n  fromJson: (json) => json as String?,\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-performance-considerations",children:"5. Performance Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use Riverpod providers for UI that needs real-time updates"}),"\n",(0,t.jsxs)(n.li,{children:["Use one-time calls (",(0,t.jsx)(n.code,{children:"getPreference"}),") for initialization or infrequent access"]}),"\n",(0,t.jsx)(n.li,{children:"Consider batching multiple preference updates when possible"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"6-migration-strategy",children:"6. Migration Strategy"}),"\n",(0,t.jsx)(n.p,{children:"When changing preference structures, handle migration gracefully:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"Future<UserSettings> migrateUserSettings() async {\n  final settings = await prefsManager.getPreference<UserSettings?>(\n    'user_settings',\n    fromJson: (json) {\n      if (json == null) return null;\n      \n      // Handle old format\n      if (json is String) {\n        return UserSettings(theme: json, darkMode: false, languages: ['en']);\n      }\n      \n      // Handle new format\n      return UserSettings.fromJson(json as Map<String, dynamic>);\n    },\n  );\n  \n  // Save in new format if migration occurred\n  if (settings != null) {\n    await prefsManager.setPreference(\n      'user_settings',\n      settings.toJson(),\n      valueType: UserPreferenceValueType.jsonObject,\n    );\n  }\n  \n  return settings ?? UserSettings.defaultSettings();\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);