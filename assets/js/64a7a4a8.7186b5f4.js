"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[633],{693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"schema","title":"Schema Management","description":"Tether automates the management of your local SQLite database schema by","source":"@site/docs/schema.md","sourceDirName":".","slug":"/schema","permalink":"/flutter_tether/schema","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"About Tether","permalink":"/flutter_tether/intro"},"next":{"title":"Models","permalink":"/flutter_tether/models"}}');var s=n(4848),i=n(8453);const r={sidebar_position:2},o="Schema Management",l={},c=[{value:"Schema Generation",id:"schema-generation",level:2},{value:"Schema Conventions",id:"schema-conventions",level:2},{value:"Best Practices",id:"best-practices",level:3}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"schema-management",children:"Schema Management"})}),"\n",(0,s.jsx)(t.p,{children:"Tether automates the management of your local SQLite database schema by\nmirroring the Postgres schema from your Supabase project. This includes handling\nmigrations, creating tables, and managing relationships."}),"\n",(0,s.jsx)(t.p,{children:"As SQLite is a full SQL database, you have to manage migrations of the local\nschema over time when you change the schema in your Supabase project so that you\ncan persist the existing data in running installations of your application."}),"\n",(0,s.jsx)(t.p,{children:"Tether will configure and manage these for you."}),"\n",(0,s.jsx)(t.h2,{id:"schema-generation",children:"Schema Generation"}),"\n",(0,s.jsx)(t.p,{children:"When you run the generator, Tether will:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Fetch the schema from your Supabase project."}),"\n",(0,s.jsxs)(t.li,{children:["Create files in ",(0,s.jsx)(t.code,{children:"/lib/database/schema"})," that represent the schema. The system\nwill compare these over time to create migrations."]}),"\n",(0,s.jsx)(t.li,{children:"Generate the necessary SQLite commands to create the tables and relationships\nin your local SQLite database."}),"\n",(0,s.jsxs)(t.li,{children:["Create a ",(0,s.jsx)(t.code,{children:"supabase_schema.dart"})," file that is a snapshot of the current schema.\nThis file is used by the managers to interact with relationships."]}),"\n",(0,s.jsxs)(t.li,{children:["Create migrations for the local SQLite database in\n",(0,s.jsx)(t.code,{children:"lib/database/sqlite_migrations"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Create the database files for the local SQLite database. Typically at\n",(0,s.jsx)(t.code,{children:"lib/database/database.dart"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"schema-conventions",children:"Schema Conventions"}),"\n",(0,s.jsx)(t.p,{children:"Tether will try to following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use the same table names as in your Supabase project. i.e. ",(0,s.jsx)(t.code,{children:"user_profiles"})," in\nSupabase will be ",(0,s.jsx)(t.code,{children:"user_profiles"})," in SQLite."]}),"\n",(0,s.jsxs)(t.li,{children:["Use the same column names as in your Supabase project. i.e. ",(0,s.jsx)(t.code,{children:"some_column"})," in\nSupabase will be ",(0,s.jsx)(t.code,{children:"some_column"})," in SQLite."]}),"\n",(0,s.jsx)(t.li,{children:"Use the same data types as in your Supabase project or will transform them to\nthe closest equivalent in SQLite. Most data types will be mapped to the corred\nDart type by the Models system."}),"\n",(0,s.jsxs)(t.li,{children:["Use the same relationships as in your Supabase project. i.e. a ",(0,s.jsx)(t.code,{children:"profiles"}),"\ntable with a foreign key to a ",(0,s.jsx)(t.code,{children:"users"})," table will create a relationship in the\nSQLite database."]}),"\n",(0,s.jsxs)(t.li,{children:["Use the same indexes as in your Supabase project. i.e. a ",(0,s.jsx)(t.code,{children:"profiles"})," table with\nan index on the ",(0,s.jsx)(t.code,{children:"email"})," column will create an index in the SQLite database."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Tether does not currently provide a way to manually define things like indexes\non the local DB outside of the automatic generation."}),"\n",(0,s.jsx)(t.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Tether will automatically rename column that are reserved words in Dart. For\nexample, a column named ",(0,s.jsx)(t.code,{children:"default"})," in Supabase will be renamed to\n",(0,s.jsx)(t.code,{children:"defaultValue"})," in SQLite."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);