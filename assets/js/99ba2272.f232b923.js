"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[505],{4108:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"managers","title":"Managers","description":"Tether will create a Manager class for each table that is defined in the","source":"@site/docs/managers.md","sourceDirName":".","slug":"/managers","permalink":"/flutter_tether/managers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Select Builders","permalink":"/flutter_tether/select_builders"},"next":{"title":"Full Text Search","permalink":"/flutter_tether/full_text_search"}}');var o=t(4848),s=t(8453);const l={sidebar_position:5},r="Managers",i={},d=[{value:"Accessing Managers",id:"accessing-managers",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Database Client API",id:"database-client-api",level:3},{value:"Streaming Data",id:"streaming-data",level:4},{value:"Local or Remote Fetching",id:"local-or-remote-fetching",level:4},{value:"Relationships",id:"relationships",level:4},{value:"RPC Calls",id:"rpc-calls",level:3},{value:"Realtime Client API",id:"realtime-client-api",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"managers",children:"Managers"})}),"\n",(0,o.jsxs)(a.p,{children:["Tether will create a ",(0,o.jsx)(a.code,{children:"Manager"})," class for each table that is defined in the\nschema. The Manager is in-essence a wrapper around the Supabase client API and\noperates very much like the Supabase client API. It will automatically handle\ncaching data fetched from the remote database as well as automatically handle\noptimisitc updates for inserts, updates, and deletes."]}),"\n",(0,o.jsx)(a.h2,{id:"accessing-managers",children:"Accessing Managers"}),"\n",(0,o.jsxs)(a.p,{children:["After generation managers will be available in the ",(0,o.jsx)(a.code,{children:"lib/database/managers"}),"\ndirectory."]}),"\n",(0,o.jsx)(a.p,{children:"The intended way to use the manager is via Riverpod, but you can also use it\ndirectly with another state management solution or even without any state\nmanagement."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"// With Riverpod\nfinal booksManager = ref.watch(booksManagerProvider);\n\n// Without Riverpod - you have to pass some options in to the constructor, but you could then use it via GetIt or any other DI solution.\nfinal bookManager = BooksManager(\n    localDb: database.db, // The local SQLite database instance\n    client: Supabase.instance.client, // The Supabase client instance\n    tableSchemas: globalSupabaseSchema, // The global schema for the tables\n    fromJsonFactory: (json) => BookModel.fromJson(json), // Factory to convert Supabase JSON to the model.\n    fromSqliteFactory: (json) => BookModel.fromSqlite(json), // Factory to convert SQLite JSON to the model.\n  );\n"})}),"\n",(0,o.jsx)(a.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(a.p,{children:"The Tether Manager API is almost identical to the Supabase client API, so if you\nare familiar with the Supabase client API, you will feel right at home. It wraps\nthe following APIs:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Database client API","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"RPC is supported, but see notes below."}),"\n",(0,o.jsx)(a.li,{children:"Full-text search is supported, but see notes below."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.li,{children:"Realtime client API"}),"\n"]}),"\n",(0,o.jsx)(a.h3,{id:"database-client-api",children:"Database Client API"}),"\n",(0,o.jsx)(a.p,{children:"This will be the most commonly used API. It allows you to fetch data from\nSupabase, cache it locally, and mutate it. You will use the same methods to also\nfetch data from the local SQLite database."}),"\n",(0,o.jsxs)(a.p,{children:["You can use the ",(0,o.jsx)(a.code,{children:"query()"})," method to create a query builder for the table, and\nthen use the ",(0,o.jsx)(a.code,{children:"select()"}),", ",(0,o.jsx)(a.code,{children:"insert()"}),", ",(0,o.jsx)(a.code,{children:"update()"}),", and ",(0,o.jsx)(a.code,{children:"delete()"}),", filter and\ntransform methods to build your query."]}),"\n",(0,o.jsx)(a.p,{children:"There are a few key differences to the Supabase client API:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["The ",(0,o.jsx)(a.code,{children:"select()"})," method does not take a string, but rather a ",(0,o.jsx)(a.code,{children:"SelectBuilder"}),"\ninstance that allows you to build the select statement in a Tether manner."]}),"\n",(0,o.jsxs)(a.li,{children:["The ",(0,o.jsx)(a.code,{children:"insert()"}),", ",(0,o.jsx)(a.code,{children:"update()"}),", ",(0,o.jsx)(a.code,{children:"upsert()"})," and ",(0,o.jsx)(a.code,{children:"delete()"})," methods take a list of\nmodels (BookModel, AuthorModel, etc.) rather than a map of data. This allows\nyou to work with the models directly and ensures type safety."]}),"\n",(0,o.jsxs)(a.li,{children:["Filters and Transforms, like ",(0,o.jsx)(a.code,{children:"eq()"}),", ",(0,o.jsx)(a.code,{children:"like()"}),", ",(0,o.jsx)(a.code,{children:"order()"}),", etc., accept a\n",(0,o.jsx)(a.code,{children:"TetherColumn"})," instance rather than a string. This allows you to use the\ngenerated columns from the models directly, ensuring type safety and avoiding\ntypos."]}),"\n",(0,o.jsxs)(a.li,{children:["On inserts and updates you do not need to pass the ending ",(0,o.jsx)(a.code,{children:".select()"})," to get\nreturning data like you would with the Supabase client API. Tether will\nautomatically return the inserted or updated data as a list of models."]}),"\n",(0,o.jsx)(a.li,{children:"Managers will always return a list of models, even if you are querying for a\nsingle item. While using the Supabase client API by itself can return both a\nlist and a single item, it was not possible when wrapping the API."}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Some examples of how to use the Manager API:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Fetch all books\nfinal books = await booksManager.query().select(BooksSelectBuilder().select());\n\n// Fetch a single book by ID\nfinal book = await booksManager.query().select(BooksSelectBuilder().select())\n    .eq(BooksColumn.id, 'some-book-id')\n    .limit(1);\n\n// Insert a new book\nfinal newBook = BookModel(\n  id: 'new-book-id',\n  title: 'New Book',\n  authorId: 'author-id',\n  // other fields...\n);\nfinal insertedBook = await booksManager.query().insert([newBook]);\n\n// Update a book\nfinal updatedBook = BookModel(\n  id: 'some-book-id',\n  title: 'Updated Book Title',\n  // other fields...\n); // You will typically want to pass in a mutated version of the whole model, not just the fields you want to update.\nfinal updatedBooks = await booksManager.query().update([updatedBook])\n    .eq(BooksColumn.id, 'some-book-id');\n\n// Delete a book\nfinal deletedBooks = await booksManager.query().delete()\n    .eq(BooksColumn.id, 'some-book-id');\n"})}),"\n",(0,o.jsx)(a.h4,{id:"streaming-data",children:"Streaming Data"}),"\n",(0,o.jsxs)(a.p,{children:["You will can use the same manager to listen to have flutter create a ",(0,o.jsx)(a.code,{children:"Stream"})," of\nyour data by using ",(0,o.jsx)(a.code,{children:"onStream()"})," instead of ",(0,o.jsx)(a.code,{children:"await"})," on the query. This will\nreturn a ",(0,o.jsx)(a.code,{children:"Stream"})," of the data that you can listen to for changes from the local\ndatabase. On initialization of the stream it will also fetch data from the\nremote database and cache it locally."]}),"\n",(0,o.jsx)(a.p,{children:"Best practice is to define your streams in a Riverpod provider so that you can\neasily listen to them in your widgets. This also allow you an easy way to pass\nin options to the manager, such as listening to a specific item based on id."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"// Watch a single book by ID\nfinal bookProvider = StreamProvider.autoDispose.family<List<BookModel>, String>((ref, bookId) {\n  final booksManager = ref.watch(booksManagerProvider);\n  // Fetch a single book by ID and listen for changes\n  return booksManager.query().select(BooksSelectBuilder().select())\n      .eq(BooksColumn.id, bookId)\n      .limit(1)\n      .onStream();\n});\n\n// In your widget\nclass BookWidget extends ConsumerWidget {\n  final String bookId;\n\n  BookWidget({required this.bookId});\n\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final bookAsyncValue = ref.watch(bookProvider(bookId));\n\n    return bookAsyncValue.when(\n      data: (books) {\n        if (books.isEmpty) return Text('Book not found');\n        final book = books.first;\n        return Text('Book title: ${book.title}');\n      },\n      loading: () => CircularProgressIndicator(),\n      error: (error, stack) => Text('Error: $error'),\n    );\n  }\n}\n"})}),"\n",(0,o.jsx)(a.p,{children:"As all the mutations (insert, update, delete) are automatically optimistically\nupdated, you can listen to the stream and get real-time updates from the local\ndatabase without having to worry about the state of the remote database."}),"\n",(0,o.jsx)(a.h4,{id:"local-or-remote-fetching",children:"Local or Remote Fetching"}),"\n",(0,o.jsxs)(a.p,{children:["You can use the ",(0,o.jsx)(a.code,{children:"localOnly()"})," and ",(0,o.jsx)(a.code,{children:"remoteOnly()"})," methods to tell the manager to\nonly fetch data from the local SQLite database or the remote Supabase database,\nrespectively. This is useful when you want to ensure you are only working with\nthe local data or when you want to bypass the local cache and fetch fresh data\nfrom the remote database."]}),"\n",(0,o.jsx)(a.p,{children:"Note: All remote queries will automatically cache the data locally."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Fetch all books from the remote database only - useful if you are refreshing data you are watching via a Stream.\nfinal remoteBooks = await booksManager.query()\n    .select(BooksSelectBuilder().select())\n    .remoteOnly();\n"})}),"\n",(0,o.jsx)(a.h4,{id:"relationships",children:"Relationships"}),"\n",(0,o.jsxs)(a.p,{children:["Manager are smart and will automatically handle relationships fetching and\ncaching the data for all the related items. Just pass in a SelectBuilder\ninstance to the ",(0,o.jsx)(a.code,{children:"select()"})," method and use the ",(0,o.jsx)(a.code,{children:"with*"})," methods to include related\nitems in the query."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Fetch all books with their authors\nfinal booksWithAuthors = await booksManager.query()\n    .select(\n        BooksSelectBuilder().select()\n        .withAuthor(\n            AuthorsSelectBuilder().select()\n            ),\n        ),\n    .eq(BooksColumn.id, 'some-book-id');\n"})}),"\n",(0,o.jsx)(a.p,{children:"You can also query a table by columns on a related table. For example, if you\nwant to fetch all books by a specific author, you can do it like this:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Fetch all books by a specific author\nfinal booksByAuthor = await booksManager.query()\n    .select(BooksSelectBuilder().select())\n    .withAuthor(\n        AuthorsSelectBuilder().select()\n    ).eq(AuthorsColumn.name, 'Author Name');\n"})}),"\n",(0,o.jsx)(a.h3,{id:"rpc-calls",children:"RPC Calls"}),"\n",(0,o.jsx)(a.p,{children:"Tether supports calling Remote Procedure Calls (RPC) defined in your Supabase\nproject. There are a few things to note to make this work:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"RPCs are related to the table the Manager is for."}),"\n",(0,o.jsxs)(a.li,{children:["Because of this your stored proceedure will need to return an Array of JSON\nobjects with columns that match that table in the database. This should look\nthe same as what the Supabase API returns for a table query.","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["For example, if you have a ",(0,o.jsx)(a.code,{children:"books"})," table, your RPC should return an array of\nobjects with the same structure as the ",(0,o.jsx)(a.code,{children:"books"})," table."]}),"\n",(0,o.jsx)(a.li,{children:"You can also return data from related tables, but you will need to make sure\nit conforms to the structure that a Tether model expects (look at the\nrelated Factory method in the model for the expected structure)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Call an RPC that returns books\nfinal books = await booksManager.rpc('get_books_by_author', params: {\n  'author_id': 'author-id',\n}).select(BooksSelectBuilder().select());\n"})}),"\n",(0,o.jsx)(a.h2,{id:"realtime-client-api",children:"Realtime Client API"}),"\n",(0,o.jsx)(a.p,{children:"Tether Managers also support the Supabase Realtime API. This allows you to\nlisten to changes in the database and get real-time updates in your app, all\ncached locally."}),"\n",(0,o.jsx)(a.p,{children:"The realtime features of the Tether Manager works similarly to the Supabase\nRealtime API, but with a few differences:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-dart",children:"final booksManager = ref.watch(booksManagerProvider);\n\n// Listen to changes in the books table\nfinal booksStream = booksManager\n    .realtime() // Call the realtime method\n    .eq(BooksColumn.id, 'some-book-id') // Add all the filters and transforms next\n    .listen(); // Call .listen() to stream\n\n// Using an in filter\nfinal booksStream = booksManager\n    .realtime()\n    .inFilter(BooksColumn.id, ['book-id-1', 'book-id-2'])\n    .listen();\n"})}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["You can use the ",(0,o.jsx)(a.code,{children:"realtime()"})," method to create a realtime query builder for the\ntable, and then use the same filters and transforms as you would with the\ndatabase client API."]}),"\n",(0,o.jsxs)(a.li,{children:["Add all the filters and transforms before calling ",(0,o.jsx)(a.code,{children:"listen()"})," (see\n",(0,o.jsx)(a.a,{href:"https://supabase.com/docs/reference/dart/stream",children:"Supabase documentation"}),")."]}),"\n",(0,o.jsx)(a.li,{children:"The Manager will automatically handle caching the data locally and return the\nTetherModels for the items that changed."}),"\n",(0,o.jsx)(a.li,{children:"By default, the realtime stream will return all changes to the table."}),"\n"]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>r});var n=t(6540);const o={},s=n.createContext(o);function l(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);