"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},8532:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"additional_features/auth_manager","title":"Auth Manager","description":"The AuthManager is a crucial helper class within the Tether ecosystem,","source":"@site/docs/additional_features/auth_manager.md","sourceDirName":"additional_features","slug":"/additional_features/auth_manager","permalink":"/flutter_tether/additional_features/auth_manager","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Feed Management System","permalink":"/flutter_tether/additional_features/feed_provider"},"next":{"title":"User Preferences Manager","permalink":"/flutter_tether/additional_features/user_preferences_manager"}}');var a=r(4848),i=r(8453);const s={sidebar_position:2},l="Auth Manager",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Setup &amp; Configuration",id:"setup--configuration",level:2},{value:"1. Configure <code>tether.yaml</code>",id:"1-configure-tetheryaml",level:3},{value:"2. Generated Files",id:"2-generated-files",level:3},{value:"3. Database Schema Requirements",id:"3-database-schema-requirements",level:3},{value:"Usage with Riverpod",id:"usage-with-riverpod",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Authentication Methods",id:"authentication-methods",level:3},{value:"Sign Up",id:"sign-up",level:4},{value:"Sign In with Password",id:"sign-in-with-password",level:4},{value:"Sign In with OTP (Magic Link)",id:"sign-in-with-otp-magic-link",level:4},{value:"Sign Out",id:"sign-out",level:4},{value:"Reactive UI with Authentication State",id:"reactive-ui-with-authentication-state",level:3},{value:"Auth State Wrapper",id:"auth-state-wrapper",level:4},{value:"Profile Display",id:"profile-display",level:4},{value:"Usage without Riverpod",id:"usage-without-riverpod",level:2},{value:"Key Features &amp; Notes",id:"key-features--notes",level:2},{value:"Automatic Profile Synchronization",id:"automatic-profile-synchronization",level:3},{value:"Local Caching Strategy",id:"local-caching-strategy",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Best Practices",id:"best-practices",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"auth-manager",children:"Auth Manager"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"AuthManager"})," is a crucial helper class within the Tether ecosystem,\ndesigned to simplify user authentication and the management of an associated\nuser profile. It wraps the Supabase authentication API and provides automatic\ncaching of a user's profile data from a specified table in your Supabase\n",(0,a.jsx)(n.code,{children:"public"})," schema to a local SQLite table."]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"AuthManager"})," streamlines common authentication workflows by:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Providing standard methods for ",(0,a.jsx)(n.strong,{children:"sign-up, sign-in (with password or OTP), and\nsign-out"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Listening to ",(0,a.jsx)(n.strong,{children:"Supabase authentication state changes"})," (",(0,a.jsx)(n.code,{children:"onAuthStateChange"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:["Automatically ",(0,a.jsx)(n.strong,{children:"fetching the user's profile"})," from a designated Supabase table\nupon successful authentication."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Storing and updating"})," the user's profile in a corresponding local SQLite\ntable."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clearing local profile data"})," on sign-out or if the profile fetch fails."]}),"\n",(0,a.jsxs)(n.li,{children:["Exposing ",(0,a.jsx)(n.code,{children:"ValueNotifier"}),"s for the current Supabase ",(0,a.jsx)(n.code,{children:"User"})," and the locally\ncached ",(0,a.jsx)(n.code,{children:"TProfileModel"})," (your user profile model), enabling reactive UI\nupdates."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The key assumption is that your user profile table in Supabase:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Resides in the ",(0,a.jsx)(n.code,{children:"public"})," schema."]}),"\n",(0,a.jsxs)(n.li,{children:["Has a primary key column (typically named ",(0,a.jsx)(n.code,{children:"id"}),") that matches the ",(0,a.jsx)(n.code,{children:"id"})," of the\nSupabase authenticated user (",(0,a.jsx)(n.code,{children:"auth.users.id"}),")."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"setup--configuration",children:"Setup & Configuration"}),"\n",(0,a.jsxs)(n.h3,{id:"1-configure-tetheryaml",children:["1. Configure ",(0,a.jsx)(n.code,{children:"tether.yaml"})]}),"\n",(0,a.jsxs)(n.p,{children:["Enable authentication in your ",(0,a.jsx)(n.code,{children:"tether.yaml"})," configuration file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"generation:\n  authentication:\n    enabled: true\n    profile_table: 'profiles' # Name of your Supabase profile table\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This tells Tether to generate the ",(0,a.jsx)(n.code,{children:"AuthManager"})," class and related providers for\nthe specified profile table."]}),"\n",(0,a.jsx)(n.h3,{id:"2-generated-files",children:"2. Generated Files"}),"\n",(0,a.jsxs)(n.p,{children:["When you run ",(0,a.jsx)(n.code,{children:"dart run flutter_tether --config tether.yaml"}),", Tether will\ngenerate:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"lib/database/managers/auth_manager.g.dart"})}),": The core\n",(0,a.jsx)(n.code,{children:"AuthManager<TProfileModel>"})," class"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"lib/database/providers/auth_providers.g.dart"})}),": Riverpod providers for\neasy integration"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-database-schema-requirements",children:"3. Database Schema Requirements"}),"\n",(0,a.jsx)(n.p,{children:"Your Supabase profile table should:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'-- Example profiles table\nCREATE TABLE profiles (\n    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,\n    username TEXT UNIQUE,\n    full_name TEXT,\n    email TEXT,\n    avatar_url TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Enable RLS (Row Level Security)\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\n\n-- Policy to allow users to view and update their own profile\nCREATE POLICY "Users can view own profile" ON profiles\n    FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY "Users can update own profile" ON profiles\n    FOR UPDATE USING (auth.uid() = id);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"usage-with-riverpod",children:"Usage with Riverpod"}),"\n",(0,a.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,a.jsxs)(n.p,{children:["The generated providers make it easy to use ",(0,a.jsx)(n.code,{children:"AuthManager"})," throughout your app:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Access the AuthManager instance\nfinal authManager = ref.watch(authManagerProvider);\n\n// Watch the current authenticated user\nfinal userAsyncValue = ref.watch(currentUserProvider);\n\n// Watch the current user's profile\nfinal profileAsyncValue = ref.watch(currentProfileProvider);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"authentication-methods",children:"Authentication Methods"}),"\n",(0,a.jsx)(n.h4,{id:"sign-up",children:"Sign Up"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class SignUpWidget extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final authManager = ref.watch(authManagerProvider);\n\n    return ElevatedButton(\n      onPressed: () async {\n        try {\n          final response = await authManager.signUp(\n            email: 'user@example.com',\n            password: 'securepassword123',\n            data: {\n              'username': 'newuser',\n              'full_name': 'New User',\n            }, // Optional additional data for the auth.users table\n          );\n          \n          if (response.user != null) {\n            // Sign up successful - user will need to confirm email\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(content: Text('Check your email to confirm account')),\n            );\n          }\n        } on AuthException catch (e) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(content: Text('Sign up failed: ${e.message}')),\n          );\n        }\n      },\n      child: Text('Sign Up'),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"sign-in-with-password",children:"Sign In with Password"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class SignInWidget extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final authManager = ref.watch(authManagerProvider);\n\n    return ElevatedButton(\n      onPressed: () async {\n        try {\n          await authManager.signInWithPassword(\n            email: 'user@example.com',\n            password: 'password123',\n          );\n          // On success, profile will be fetched and cached automatically\n          Navigator.pushReplacementNamed(context, '/home');\n        } on AuthException catch (e) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(content: Text('Sign in failed: ${e.message}')),\n          );\n        }\n      },\n      child: Text('Sign In'),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"sign-in-with-otp-magic-link",children:"Sign In with OTP (Magic Link)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class OTPSignInWidget extends ConsumerStatefulWidget {\n  @override\n  _OTPSignInWidgetState createState() => _OTPSignInWidgetState();\n}\n\nclass _OTPSignInWidgetState extends ConsumerState<OTPSignInWidget> {\n  final _emailController = TextEditingController();\n  final _otpController = TextEditingController();\n  bool _otpSent = false;\n\n  @override\n  Widget build(BuildContext context) {\n    final authManager = ref.watch(authManagerProvider);\n\n    if (!_otpSent) {\n      return Column(\n        children: [\n          TextField(\n            controller: _emailController,\n            decoration: InputDecoration(labelText: 'Email'),\n          ),\n          ElevatedButton(\n            onPressed: () async {\n              try {\n                await Supabase.instance.client.auth.signInWithOtp(\n                  email: _emailController.text,\n                );\n                setState(() => _otpSent = true);\n                ScaffoldMessenger.of(context).showSnackBar(\n                  SnackBar(content: Text('Check your email for the OTP code')),\n                );\n              } on AuthException catch (e) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                  SnackBar(content: Text('Error: ${e.message}')),\n                );\n              }\n            },\n            child: Text('Send OTP'),\n          ),\n        ],\n      );\n    }\n\n    return Column(\n      children: [\n        TextField(\n          controller: _otpController,\n          decoration: InputDecoration(labelText: 'Enter OTP Code'),\n        ),\n        ElevatedButton(\n          onPressed: () async {\n            try {\n              await authManager.signInWithOtp(\n                email: _emailController.text,\n                token: _otpController.text,\n              );\n              Navigator.pushReplacementNamed(context, '/home');\n            } on AuthException catch (e) {\n              ScaffoldMessenger.of(context).showSnackBar(\n                SnackBar(content: Text('OTP verification failed: ${e.message}')),\n              );\n            }\n          },\n          child: Text('Verify OTP'),\n        ),\n        TextButton(\n          onPressed: () async {\n            try {\n              await authManager.resendOtp(\n                email: _emailController.text,\n                type: OtpType.email,\n              );\n              ScaffoldMessenger.of(context).showSnackBar(\n                SnackBar(content: Text('OTP resent')),\n              );\n            } on AuthException catch (e) {\n              ScaffoldMessenger.of(context).showSnackBar(\n                SnackBar(content: Text('Resend failed: ${e.message}')),\n              );\n            }\n          },\n          child: Text('Resend OTP'),\n        ),\n      ],\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"sign-out",children:"Sign Out"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class SignOutWidget extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final authManager = ref.watch(authManagerProvider);\n\n    return ElevatedButton(\n      onPressed: () async {\n        await authManager.signOut();\n        Navigator.pushReplacementNamed(context, '/login');\n      },\n      child: Text('Sign Out'),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"reactive-ui-with-authentication-state",children:"Reactive UI with Authentication State"}),"\n",(0,a.jsx)(n.h4,{id:"auth-state-wrapper",children:"Auth State Wrapper"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class AuthWrapper extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final userAsyncValue = ref.watch(currentUserProvider);\n\n    return userAsyncValue.when(\n      data: (user) {\n        if (user != null) {\n          return HomeScreen(); // User is authenticated\n        } else {\n          return LoginScreen(); // User is not authenticated\n        }\n      },\n      loading: () => Scaffold(\n        body: Center(child: CircularProgressIndicator()),\n      ),\n      error: (error, stack) => Scaffold(\n        body: Center(child: Text('Error: $error')),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"profile-display",children:"Profile Display"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class ProfileWidget extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final profileAsyncValue = ref.watch(currentProfileProvider);\n    final userAsyncValue = ref.watch(currentUserProvider);\n\n    return profileAsyncValue.when(\n      data: (profile) {\n        if (profile != null) {\n          return Column(\n            children: [\n              Text('Welcome, ${profile.fullName ?? profile.username}!'),\n              if (profile.avatarUrl != null)\n                CircleAvatar(\n                  backgroundImage: NetworkImage(profile.avatarUrl!),\n                ),\n              Text('Email: ${profile.email}'),\n            ],\n          );\n        } else {\n          return userAsyncValue.when(\n            data: (user) => user != null \n              ? Text('Profile not found') \n              : Text('Not signed in'),\n            loading: () => CircularProgressIndicator(),\n            error: (error, stack) => Text('Error: $error'),\n          );\n        }\n      },\n      loading: () => CircularProgressIndicator(),\n      error: (error, stack) => Text('Profile error: $error'),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage-without-riverpod",children:"Usage without Riverpod"}),"\n",(0,a.jsxs)(n.p,{children:["If you're not using Riverpod, you can still use ",(0,a.jsx)(n.code,{children:"AuthManager"})," directly:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class AuthService {\n  late final AuthManager<ProfileModel> _authManager;\n\n  AuthService() {\n    _authManager = AuthManager<ProfileModel>(\n      supabaseClient: Supabase.instance.client,\n      localDb: yourSqliteConnection, // Your SQLite connection\n      supabaseProfileTableName: 'profiles',\n      localProfileTableName: 'profiles',\n      profileFromJsonFactory: ProfileModel.fromJson,\n      tableSchemas: globalSupabaseSchema, // Your generated schema\n    );\n\n    // Listen to authentication state changes\n    _authManager.currentUserNotifier.addListener(_onUserChanged);\n    _authManager.currentProfileNotifier.addListener(_onProfileChanged);\n  }\n\n  void _onUserChanged() {\n    final user = _authManager.currentUserNotifier.value;\n    print('User changed: ${user?.id}');\n  }\n\n  void _onProfileChanged() {\n    final profile = _authManager.currentProfileNotifier.value;\n    print('Profile changed: ${profile?.username}');\n  }\n\n  Future<void> signIn(String email, String password) async {\n    await _authManager.signInWithPassword(email: email, password: password);\n  }\n\n  Future<void> signOut() async {\n    await _authManager.signOut();\n  }\n\n  void dispose() {\n    _authManager.dispose();\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-features--notes",children:"Key Features & Notes"}),"\n",(0,a.jsx)(n.h3,{id:"automatic-profile-synchronization",children:"Automatic Profile Synchronization"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"On Sign In"}),": Profile is automatically fetched from Supabase and cached\nlocally"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"On Token Refresh"}),": Profile is re-fetched to ensure it's up-to-date"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"On Sign Out"}),": Local profile data is automatically cleared"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"On Profile Not Found"}),": Local data is cleared and\n",(0,a.jsx)(n.code,{children:"currentProfileNotifier.value"})," becomes ",(0,a.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"local-caching-strategy",children:"Local Caching Strategy"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Uses a ",(0,a.jsx)(n.strong,{children:"single-user approach"}),": Only one profile is stored locally at a time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Delete and Insert"}),": When a new profile is fetched, existing local data is\ndeleted first"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automatic Cleanup"}),": Local data is cleared on sign-out or authentication\nerrors"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network Errors"}),": Gracefully handled with logging; local data is cleared on\nfetch failures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Schema Mismatches"}),": Logged with clear error messages"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Authentication Errors"}),": Propagated as ",(0,a.jsx)(n.code,{children:"AuthException"})," from Supabase"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Always dispose"}),": Call ",(0,a.jsx)(n.code,{children:"authManager.dispose()"})," when no longer needed\n(handled automatically with Riverpod providers)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Profile table structure"}),": Ensure your profile table's ",(0,a.jsx)(n.code,{children:"id"})," matches\n",(0,a.jsx)(n.code,{children:"auth.users.id"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Row Level Security"}),": Enable RLS on your profile table for security"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error boundaries"}),": Wrap authentication calls in try-catch blocks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loading states"}),": Use the reactive providers to show appropriate loading\nstates in your UI"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);