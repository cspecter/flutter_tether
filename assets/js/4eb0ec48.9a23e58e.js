"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[456],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const l={},i=s.createContext(l);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"select_builders","title":"Select Builders","description":"Tether provides a system for building queries that conform to both Supabase and","source":"@site/docs/select_builders.md","sourceDirName":".","slug":"/select_builders","permalink":"/flutter_tether/select_builders","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/flutter_tether/models"},"next":{"title":"Managers","permalink":"/flutter_tether/managers"}}');var l=t(4848),i=t(8453);const o={sidebar_position:4},a="Select Builders",r={},d=[{value:"Column Enums",id:"column-enums",level:2},{value:"Select Builders",id:"select-builders-1",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Relationships",id:"relationships",level:2},{value:"One-to-One and One-to-Many Relationships",id:"one-to-one-and-one-to-many-relationships",level:3},{value:"Multiple Related Items",id:"multiple-related-items",level:4},{value:"Many-to-Many Relationships",id:"many-to-many-relationships",level:3},{value:"Filtering Many-to-Many Relationships",id:"filtering-many-to-many-relationships",level:4},{value:"Reusable Select Builders",id:"reusable-select-builders",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"select-builders",children:"Select Builders"})}),"\n",(0,l.jsx)(n.p,{children:"Tether provides a system for building queries that conform to both Supabase and\nSQLite syntax. This allows you to construct complex queries in a simplified,\nDart-compliant, and composable manner."}),"\n",(0,l.jsx)(n.h2,{id:"column-enums",children:"Column Enums"}),"\n",(0,l.jsx)(n.p,{children:"Tether generates enums for each table in your database. These enums represent\nthe columns in the table and can be used to construct queries."}),"\n",(0,l.jsx)(n.p,{children:"For the following table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE books (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    title TEXT NOT NULL,\n    description TEXT,\n    publication_date DATE,\n    price NUMERIC(10, 2), -- Example of a NUMERIC field for precise decimal values\n    stock_count INTEGER DEFAULT 0, -- Example of an INTEGER field\n    cover_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    banner_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    author_id UUID REFERENCES authors(id) ON DELETE SET NULL, -- Foreign key to authors\n    metadata JSONB, -- Example of a JSONB field for storing arbitrary metadata\n    tags TEXT[], -- Example of an array field for storing tags\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    document tsvector -- Column for full-text search\n);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Would generate a ",(0,l.jsx)(n.code,{children:"BooksColumns"})," enum, which is used in the select builders to\nreference the columns in the ",(0,l.jsx)(n.code,{children:"books"})," table. This allows you to reference columns\nfor both Supabase and SQLite like ",(0,l.jsx)(n.code,{children:"BooksColumn.id.originalName"})," or\n",(0,l.jsx)(n.code,{children:"BooksColumn.id.localName"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"select-builders-1",children:"Select Builders"}),"\n",(0,l.jsx)(n.p,{children:"A Select Builder is a helper class that will allow you to construct the select\nstring for your queries to be consumed by the Supabase API or SQLite, managing\nthe data you want to fetch from the database. These will mostly be used by the\nManagers when building a query."}),"\n",(0,l.jsx)(n.p,{children:"It's recommended that you define all the select statements you need in a single\nfile that you can reference in your code. The select builder system is very\nflexible, allowing you to assemble complex queries with relationships."}),"\n",(0,l.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.p,{children:"Use the .select() method to specify the columns you want to fetch."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final bookSelectAll = BooksSelectBuilder().select();\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you call select without any arguments, it will select all columns. This will\npass ",(0,l.jsx)(n.code,{children:"'*'"})," into the select method in the Supabase API when built."]}),"\n",(0,l.jsx)(n.p,{children:"Passing in an array of [BooksColumn] will select only those columns. Note: if\nyou have required columns you will need to include them here."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final bookSelectSome = BooksSelectBuilder().select([\n  BooksColumn.id,\n  BooksColumn.title,\n  BooksColumn.authorId,\n]);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This is will pass ",(0,l.jsx)(n.code,{children:"'id,title,author_id'"})," into the select method in the Supabase\nAPI when built, selecting only those columns."]}),"\n",(0,l.jsx)(n.h2,{id:"relationships",children:"Relationships"}),"\n",(0,l.jsx)(n.p,{children:"Let's take the previous schema as an example."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE books (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    title TEXT NOT NULL,\n    description TEXT,\n    publication_date DATE,\n    price NUMERIC(10, 2), -- Example of a NUMERIC field for precise decimal values\n    stock_count INTEGER DEFAULT 0, -- Example of an INTEGER field\n    cover_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    banner_image_id UUID REFERENCES images(id) ON DELETE SET NULL, -- Foreign key to images\n    author_id UUID REFERENCES authors(id) ON DELETE SET NULL, -- Foreign key to authors\n    metadata JSONB, -- Example of a JSONB field for storing arbitrary metadata\n    tags TEXT[], -- Example of an array field for storing tags\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    document tsvector -- Column for full-text search\n);\n\nCREATE TABLE images (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    url TEXT NOT NULL, -- URL of the image\n    alt_text TEXT, -- Alternative text for the image\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE authors (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    bio TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE genres (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL UNIQUE, -- Example of a UNIQUE constraint\n    description TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\nCREATE TABLE book_genres (\n    book_id UUID REFERENCES books(id) ON DELETE CASCADE,\n    genre_id UUID REFERENCES genres(id) ON DELETE CASCADE,\n    PRIMARY KEY (book_id, genre_id) -- Composite primary key\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"one-to-one-and-one-to-many-relationships",children:"One-to-One and One-to-Many Relationships"}),"\n",(0,l.jsxs)(n.p,{children:["For each one-to-one relationship in the table, the Select Builder will generate\na helper method to let you include that data in the select statement. For\nexample, for an associated item from ",(0,l.jsx)(n.code,{children:"authors"}),", you would have a method named\n",(0,l.jsx)(n.code,{children:"withAuthor"})," (singularized as it is to a single item)."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final bookSelectWithAuthor = BooksSelectBuilder()\n  .select()\n  .withAuthor(AuthorsSelectBuilder()\n    .select(),\n    );\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You need to pass in the Select Builder for the related table, in this case\n",(0,l.jsx)(n.code,{children:"AuthorsSelectBuilder"}),", and call it's ",(0,l.jsx)(n.code,{children:".select()"})," method to specify the columns\nyou want to fetch from the related table."]}),"\n",(0,l.jsxs)(n.p,{children:["Then built, it will pass the following select string to the Supabase API:\n",(0,l.jsx)(n.code,{children:"*, author:authors!books_author_id_fkey(*)"}),", fetching all the columns for the\nBook and all the columns for the related Author in one query."]}),"\n",(0,l.jsx)(n.h4,{id:"multiple-related-items",children:"Multiple Related Items"}),"\n",(0,l.jsxs)(n.p,{children:["In your ",(0,l.jsx)(n.code,{children:"books"})," table we have two foreign keys to the ",(0,l.jsx)(n.code,{children:"images"})," table, one for\nthe cover image and one for the banner image. Tether will generate two methods\nfor these relationships: ",(0,l.jsx)(n.code,{children:"withCoverImage"})," and ",(0,l.jsx)(n.code,{children:"withBannerImage"}),". You can use\nthese methods to include the related images in the select statement."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final bookSelectWithImages = BooksSelectBuilder()\n  .select()\n  .withCoverImage(ImagesSelectBuilder().select())\n  .withBannerImage(ImagesSelectBuilder().select());\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This will pass the following select string to the Supabase API:\n",(0,l.jsx)(n.code,{children:"*, cover_image:images!books_cover_image_id_fkey(*), banner_image:images!books_banner_image_id_fkey(*)"}),",\nfetching data for both items, but clearly distinguishing between the two in the\nresulting response. Tether will handle caching them separately for you."]}),"\n",(0,l.jsx)(n.h3,{id:"many-to-many-relationships",children:"Many-to-Many Relationships"}),"\n",(0,l.jsxs)(n.p,{children:["In our example schema we have a many-to-many relationship between ",(0,l.jsx)(n.code,{children:"books"})," and\n",(0,l.jsx)(n.code,{children:"genres"})," through the ",(0,l.jsx)(n.code,{children:"book_genres"})," table. In the Supabase API you can get a list\nof all the ",(0,l.jsx)(n.code,{children:"genres"})," without fetching the ",(0,l.jsx)(n.code,{children:"book_genres"})," table as a convenience,\nTether requires the join table, ",(0,l.jsx)(n.code,{children:"book_genres"}),", so that we can accurately\nrepresent the relationship in the local SQLite database."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"One thing to note is that with Tether, when selecting related items, you will\nnot be able to paginate them. If you need to paginate the related items, you\nwill need to query them separately."}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["In this case the ",(0,l.jsx)(n.code,{children:"BooksSelectBuilder"})," will generate a method named\n",(0,l.jsx)(n.code,{children:"withBookGenres"})," that allows you to include the related genres in the select\nstatement."]}),"\n",(0,l.jsx)(n.p,{children:"You would use it like this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final bookSelectWithGenres = BooksSelectBuilder()\n  .select()\n  .withBookGenres(BookGenresSelectBuilder().select().withGenre(\n    GenresSelectBuilder().select(),\n  ));\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Note you need to call the ",(0,l.jsx)(n.code,{children:"withGenre"})," method on the ",(0,l.jsx)(n.code,{children:"BookGenresSelectBuilder"}),"\nand pass in the ",(0,l.jsx)(n.code,{children:"GenresSelectBuilder"})," to specify the columns you want to fetch\nfrom the ",(0,l.jsx)(n.code,{children:"genres"})," table."]}),"\n",(0,l.jsxs)(n.p,{children:["This will pass the following select string to the Supabase API:\n",(0,l.jsx)(n.code,{children:"*, book_genres:book_genres!books_book_id_fkey(*, genre:genres!book_genres_genre_id_fkey(*))"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"filtering-many-to-many-relationships",children:"Filtering Many-to-Many Relationships"}),"\n",(0,l.jsxs)(n.p,{children:["You can query a referenced table by indicating the relation is an ",(0,l.jsx)(n.code,{children:"inner join"}),",\nthen filtering through the Manager API on the related table column. For example,\nlet's say you have a ",(0,l.jsx)(n.code,{children:"posts"})," table with a ",(0,l.jsx)(n.code,{children:"likes"})," table that has a many-to-many\nrelationship with ",(0,l.jsx)(n.code,{children:"users"}),". You can filter the posts by the users who liked them\nlike this:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final postsWithLikes = PostsSelectBuilder()\n  .select()\n  .withLikes(UsersSelectBuilder().select()innerJoin: true);\n\nfinal postsWithLikes = await postsManager.query().select(postsWithLikes)\n  .eq(LikesColumn.userId, 'some-user-id');\n"})}),"\n",(0,l.jsxs)(n.p,{children:["This will pass the following select string to the Supabase API:\n",(0,l.jsx)(n.code,{children:"*, likes:likes!inner(*)"}),", and then filter the results based on the ",(0,l.jsx)(n.code,{children:"user_id"}),"\ncolumn in the ",(0,l.jsx)(n.code,{children:"likes"})," table returning all the data for the posts and only the\n",(0,l.jsx)(n.code,{children:"likes"})," that match the specified user ID."]}),"\n",(0,l.jsx)(n.h2,{id:"reusable-select-builders",children:"Reusable Select Builders"}),"\n",(0,l.jsxs)(n.p,{children:["Select Builders are made to be reuseable, so best practice is to define define\nthe data you want for each type of query you might need. Typically you will want\nto fetch all the data from the table, but there are cases where you might want\nto fetch only a subset of the data, for example if you have a ",(0,l.jsx)(n.code,{children:"user_profiles"}),"\ntable and you want to fetch only the ",(0,l.jsx)(n.code,{children:"name"})," and ",(0,l.jsx)(n.code,{children:"description"})," columns for a\nforeign user, but all the columns for the current user."]}),"\n",(0,l.jsxs)(n.p,{children:["For the ",(0,l.jsx)(n.code,{children:"books"})," example, you might define this like so:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final imageSelect = ImagesSelectBuilder().select();\n\nfinal genreSelect = GenresSelectBuilder().select();\n\nfinal authorSelect = AuthorsSelectBuilder().select();\n\nfinal bookGenreSelect = BookGenresSelectBuilder().select().withGenre(\n  genreSelect,\n);\n\nfinal bookSelect = BooksSelectBuilder()\n    .select()\n    .withAuthor(authorSelect)\n    .withBookGenres(bookGenreSelect.withGenre(genreSelect))\n    .withCoverImage(imageSelect)\n    .withBannerImage(imageSelect);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);